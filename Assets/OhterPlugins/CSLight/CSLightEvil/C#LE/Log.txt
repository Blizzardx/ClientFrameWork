2014-12-04 0.60.1Beta
	
	修复这种表达式问题Vector3 vec= new Vector3(1,2,3)*0.5f;
	之前new 之后的不会执行

2014-12-04 0.6Beta
    增加了一个C#Light序列化到Json的例子
	见EvilTestor 用例9
	可以参照此例子建立脚本到数据的映射
	完成协议传输等工作

	class Like
	{
		public string name;
		public string desc;
	}
	class Love
	{
		public int id;
	}
	class TSave
	{
		public string name;
		public int age;
		public Love love;
		public List<Like> like;
		public List<string> strs;
	}
	class Test09
	{
		public Color vv;

		public static void Test()
		{
			MyJson.JsonNode_Object objst =MyJson.Parse
				("{\"love\":{\"id\":12345}\"name\":\"aname\",\"age\":123,\"like\":[{\"name\":\"aaa\",\"desc\":\"aaaaaa\"},{\"name\":\"bbb\",\"desc\":\"bbbbbb\"}],\"strs\":[\"aa\",\"bb\"]}")
					as MyJson.JsonNode_Object;

			TSave read = CSLEConvert.FromJson("TSave", objst) as TSave;
            
			Debug.Log("read.name=" + read.name);
			Debug.Log("read.like[0].name=" + read.like[0].name);
			Debug.Log("read.strs[1]=" + read.strs[1]);
			Debug.Log("read.love.id=" + read.love.id);
			Debug.Log("write" + CSLEConvert.ToJson(read).ToString());
		}

	}


2014-12-03 0.59.1Beta
	追加如下三个默认注册，不用再自行注册
	RegType(new RegHelper_Type(typeof(object),"object"));
	RegType(new RegHelper_Type(typeof(List<>), "List"));
	RegType(new RegHelper_Type(typeof(Dictionary<,>), "Dictionary"));

	修改了一处强制转换表达式识别错误
2014-12-02 0.59Beta

修正了 int +String null+string 的问题

修改了一个机制

List<ScriptType> （ScriptType是脚本类型） 可以使用了，只需要注册List<>

其内部会变成List<object>

但是保证脚本看起来像是把脚本放进了模板元


2014-12-02 0.58.1Beta

修正了参数传null无法识别类型的问题

2014-12-02 0.58Beta

修正了模板函数调用的多处错误

泛型函数调用未检查父类型已修正

泛型函数调用时多余的空格导致的识别错误已修正

泛型函数调用参数还是泛型时的识别错误已修正





2014-12-01 0.57.1Beta
Fix 一点小问题
string[] ss = str.Split(new char[]{','});
保证这种char表达式可以正当执行（需要注册char[],string[]）

2014-12-01 0.57Beta
修改了函数调用机制，已经可以处理委托直接作为函数参数输入的情况。
调用函数参数可以自动转型的情况也已经处理。
调用默认参数的情况也已经处理。


2014-12-01 0.56Beta
fix一处优化笔误，get set 出了问题
重写了混乱的委托 -= 的处理


2014-11-29 0.55Beta

加入了表达式缓存，MemberCall调用和StaticCall调用加入了表达式缓存。
多次执行表达式时会极大的提升效率
indexset,indexget加入了类型缓存
效率都有一定提升

valueget valueset先加入了类型缓存，使用表达式缓存也许也会有一定提升





2014-11-17 0.51Beta
允许成员函数和类型重名
修改字符串识别逻辑bug

2014-11-05 0.50Beta
修改了 as 表达式的一些不严谨问题
增加了 is 表达式

2014-10-28 0.49.7Beta
添加了单引号char表达式

2014-10-13 0.49.6Beta
修改了 !表达式 无视运算优先级的bug

2014-10-11 0.49.5Beta【Graphics修改】
加入了ulong

2014-09-29 0.49.4Beta
修正了if(null==xxx)这种表达式
修正了用子类访问父类的静态成员的问题


2014-09-22 0.49.3Beta
结构体没有默认构造函数，修改此问题


2014-09-21 0.49.2Beta
修改了一个string+null 会崩溃的bug

2014-09-10 0.49.1Beta【Graphics修改】
加入了long的支持
从新编写了算数运算部分,更统一。

0.49Beta
加入了成员变量自运算
和静态变量自运算

0.48.6
修正了自动注册模板类型的一处错误

0.48.5Beta
Graphic 增加了一组带返回值委托
修正了访问未注册过类型的问题
修正了index get 为object的问题
还有其他，忘记了...

0.48.3Beta
修正了数组[] 作为参数的问题
修正了数组在IOS下的异常

0.48.2Beta
修正了一系列bug
(a).b=1;
return 异常的传递

0.48.1Beta
模板函数调用 和 泛型类型注册 IOS已测，可用。
另外修改泛型类型注册导致过去的注册方法失效的bug

0.48Beta（IOS未测）
泛型类型可以如此注册一次，编译时自动注册实做类型（IOS未测）
Type t =Type.GetType("System.Collections.Generic.List`1");
scriptService.RegType(new CSLE.RegHelper_Type(t, "List"));

0.47Beta
脚本类型可丢容器 List<object>

0.46Beta
模板函数调用（IOS未测）

0.45Beta
修正了lambda表达式 显示声明类型的语法
修正了lambda表达式空函数和脚本空函数作为delegate的情况

0.44Beta
修正了int[] 作为成员变量的问题
修正了模板类型的空格兼容性，现在随便多个空格少个空格,不敏感

0.43Beta
bool型oo漏了，补上


0.42Beta
加入了新的基本类型 byte sbyte short ushort 
见C#LightTestor _3002_ 测试

0.41Beta 调整了委托的实现机制，注册使用更便捷

0.40Beta 经各平台测试,特修改为Beta版

0.39.4Alpha 怀疑一处属性调用方法修改可以解决AOT问题，尝试之

0.39.3Alpha 匿名函数Lambda表达式支持

0.39.2 修改了回调机制
脚本也可以调用回调

0.39.1 脚本定义类型bug修正

0.39Alpha
支持了 while表达式与do while表达式
加入了unity的一些例子

0.38Alpha
完整支持了数组

0.37Alpha
修改了不少小的问题
另外完成了try catch throw，和C#的用法一致

0.36.3Alpha
加入interface继承机制

0.36.2Alpha
修改脚本类型==null表达式bug
0.36.1Alpha
Buf fixed:
for(xxx)
{
   int i;
}
for循环里只有一行变量定义会导致作用域问题，此bug已修正
