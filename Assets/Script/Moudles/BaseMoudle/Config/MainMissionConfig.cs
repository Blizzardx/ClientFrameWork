/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Config
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class MainMissionConfig : TBase
  {
    private int _id;
    private int _nameMessageId;
    private string _nameAudioId;
    private int _nextMissionId;
    private int _level;
    private int _completeFuncId;
    private int _desMessionId;
    private string _desAudioId;
    private int _acceptLimitId;

    public int Id
    {
      get
      {
        return _id;
      }
      set
      {
        __isset.id = true;
        this._id = value;
      }
    }

    public int NameMessageId
    {
      get
      {
        return _nameMessageId;
      }
      set
      {
        __isset.nameMessageId = true;
        this._nameMessageId = value;
      }
    }

    public string NameAudioId
    {
      get
      {
        return _nameAudioId;
      }
      set
      {
        __isset.nameAudioId = true;
        this._nameAudioId = value;
      }
    }

    public int NextMissionId
    {
      get
      {
        return _nextMissionId;
      }
      set
      {
        __isset.nextMissionId = true;
        this._nextMissionId = value;
      }
    }

    public int Level
    {
      get
      {
        return _level;
      }
      set
      {
        __isset.level = true;
        this._level = value;
      }
    }

    public int CompleteFuncId
    {
      get
      {
        return _completeFuncId;
      }
      set
      {
        __isset.completeFuncId = true;
        this._completeFuncId = value;
      }
    }

    public int DesMessionId
    {
      get
      {
        return _desMessionId;
      }
      set
      {
        __isset.desMessionId = true;
        this._desMessionId = value;
      }
    }

    public string DesAudioId
    {
      get
      {
        return _desAudioId;
      }
      set
      {
        __isset.desAudioId = true;
        this._desAudioId = value;
      }
    }

    public int AcceptLimitId
    {
      get
      {
        return _acceptLimitId;
      }
      set
      {
        __isset.acceptLimitId = true;
        this._acceptLimitId = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool id;
      public bool nameMessageId;
      public bool nameAudioId;
      public bool nextMissionId;
      public bool level;
      public bool completeFuncId;
      public bool desMessionId;
      public bool desAudioId;
      public bool acceptLimitId;
    }

    public MainMissionConfig() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 10:
            if (field.Type == TType.I32) {
              Id = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 20:
            if (field.Type == TType.I32) {
              NameMessageId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 21:
            if (field.Type == TType.String) {
              NameAudioId = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 30:
            if (field.Type == TType.I32) {
              NextMissionId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 40:
            if (field.Type == TType.I32) {
              Level = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 50:
            if (field.Type == TType.I32) {
              CompleteFuncId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 60:
            if (field.Type == TType.I32) {
              DesMessionId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 70:
            if (field.Type == TType.String) {
              DesAudioId = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 80:
            if (field.Type == TType.I32) {
              AcceptLimitId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("MainMissionConfig");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.id) {
        field.Name = "id";
        field.Type = TType.I32;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Id);
        oprot.WriteFieldEnd();
      }
      if (__isset.nameMessageId) {
        field.Name = "nameMessageId";
        field.Type = TType.I32;
        field.ID = 20;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(NameMessageId);
        oprot.WriteFieldEnd();
      }
      if (NameAudioId != null && __isset.nameAudioId) {
        field.Name = "nameAudioId";
        field.Type = TType.String;
        field.ID = 21;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(NameAudioId);
        oprot.WriteFieldEnd();
      }
      if (__isset.nextMissionId) {
        field.Name = "nextMissionId";
        field.Type = TType.I32;
        field.ID = 30;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(NextMissionId);
        oprot.WriteFieldEnd();
      }
      if (__isset.level) {
        field.Name = "level";
        field.Type = TType.I32;
        field.ID = 40;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Level);
        oprot.WriteFieldEnd();
      }
      if (__isset.completeFuncId) {
        field.Name = "completeFuncId";
        field.Type = TType.I32;
        field.ID = 50;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(CompleteFuncId);
        oprot.WriteFieldEnd();
      }
      if (__isset.desMessionId) {
        field.Name = "desMessionId";
        field.Type = TType.I32;
        field.ID = 60;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(DesMessionId);
        oprot.WriteFieldEnd();
      }
      if (DesAudioId != null && __isset.desAudioId) {
        field.Name = "desAudioId";
        field.Type = TType.String;
        field.ID = 70;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(DesAudioId);
        oprot.WriteFieldEnd();
      }
      if (__isset.acceptLimitId) {
        field.Name = "acceptLimitId";
        field.Type = TType.I32;
        field.ID = 80;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(AcceptLimitId);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("MainMissionConfig(");
      sb.Append("Id: ");
      sb.Append(Id);
      sb.Append(",NameMessageId: ");
      sb.Append(NameMessageId);
      sb.Append(",NameAudioId: ");
      sb.Append(NameAudioId);
      sb.Append(",NextMissionId: ");
      sb.Append(NextMissionId);
      sb.Append(",Level: ");
      sb.Append(Level);
      sb.Append(",CompleteFuncId: ");
      sb.Append(CompleteFuncId);
      sb.Append(",DesMessionId: ");
      sb.Append(DesMessionId);
      sb.Append(",DesAudioId: ");
      sb.Append(DesAudioId);
      sb.Append(",AcceptLimitId: ");
      sb.Append(AcceptLimitId);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
