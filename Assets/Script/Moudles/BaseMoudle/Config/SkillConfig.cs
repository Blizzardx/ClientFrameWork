/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Config
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class SkillConfig : TBase
  {
    private int _id;
    private int _nameMessageId;
    private int _descMessageId;
    private string _skillIcon;
    private int _actionId;
    private int _priority;
    private int _skillType;
    private int _quality;
    private int _level;
    private int _cd;
    private int _addCd;
    private int _perLimitId;
    private int _perFuncId;
    private int _targeteId;
    private int _limitId;
    private int _funcId;

    public int Id
    {
      get
      {
        return _id;
      }
      set
      {
        __isset.id = true;
        this._id = value;
      }
    }

    public int NameMessageId
    {
      get
      {
        return _nameMessageId;
      }
      set
      {
        __isset.nameMessageId = true;
        this._nameMessageId = value;
      }
    }

    public int DescMessageId
    {
      get
      {
        return _descMessageId;
      }
      set
      {
        __isset.descMessageId = true;
        this._descMessageId = value;
      }
    }

    public string SkillIcon
    {
      get
      {
        return _skillIcon;
      }
      set
      {
        __isset.skillIcon = true;
        this._skillIcon = value;
      }
    }

    public int ActionId
    {
      get
      {
        return _actionId;
      }
      set
      {
        __isset.actionId = true;
        this._actionId = value;
      }
    }

    public int Priority
    {
      get
      {
        return _priority;
      }
      set
      {
        __isset.priority = true;
        this._priority = value;
      }
    }

    public int SkillType
    {
      get
      {
        return _skillType;
      }
      set
      {
        __isset.skillType = true;
        this._skillType = value;
      }
    }

    public int Quality
    {
      get
      {
        return _quality;
      }
      set
      {
        __isset.quality = true;
        this._quality = value;
      }
    }

    public int Level
    {
      get
      {
        return _level;
      }
      set
      {
        __isset.level = true;
        this._level = value;
      }
    }

    public int Cd
    {
      get
      {
        return _cd;
      }
      set
      {
        __isset.cd = true;
        this._cd = value;
      }
    }

    public int AddCd
    {
      get
      {
        return _addCd;
      }
      set
      {
        __isset.addCd = true;
        this._addCd = value;
      }
    }

    public int PerLimitId
    {
      get
      {
        return _perLimitId;
      }
      set
      {
        __isset.perLimitId = true;
        this._perLimitId = value;
      }
    }

    public int PerFuncId
    {
      get
      {
        return _perFuncId;
      }
      set
      {
        __isset.perFuncId = true;
        this._perFuncId = value;
      }
    }

    public int TargeteId
    {
      get
      {
        return _targeteId;
      }
      set
      {
        __isset.targeteId = true;
        this._targeteId = value;
      }
    }

    public int LimitId
    {
      get
      {
        return _limitId;
      }
      set
      {
        __isset.limitId = true;
        this._limitId = value;
      }
    }

    public int FuncId
    {
      get
      {
        return _funcId;
      }
      set
      {
        __isset.funcId = true;
        this._funcId = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool id;
      public bool nameMessageId;
      public bool descMessageId;
      public bool skillIcon;
      public bool actionId;
      public bool priority;
      public bool skillType;
      public bool quality;
      public bool level;
      public bool cd;
      public bool addCd;
      public bool perLimitId;
      public bool perFuncId;
      public bool targeteId;
      public bool limitId;
      public bool funcId;
    }

    public SkillConfig() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              Id = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.I32) {
              NameMessageId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 20:
            if (field.Type == TType.I32) {
              DescMessageId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 30:
            if (field.Type == TType.String) {
              SkillIcon = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 40:
            if (field.Type == TType.I32) {
              ActionId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 50:
            if (field.Type == TType.I32) {
              Priority = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 60:
            if (field.Type == TType.I32) {
              SkillType = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 70:
            if (field.Type == TType.I32) {
              Quality = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 80:
            if (field.Type == TType.I32) {
              Level = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 90:
            if (field.Type == TType.I32) {
              Cd = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 100:
            if (field.Type == TType.I32) {
              AddCd = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 110:
            if (field.Type == TType.I32) {
              PerLimitId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 120:
            if (field.Type == TType.I32) {
              PerFuncId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 130:
            if (field.Type == TType.I32) {
              TargeteId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 140:
            if (field.Type == TType.I32) {
              LimitId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 150:
            if (field.Type == TType.I32) {
              FuncId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("SkillConfig");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.id) {
        field.Name = "id";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Id);
        oprot.WriteFieldEnd();
      }
      if (__isset.nameMessageId) {
        field.Name = "nameMessageId";
        field.Type = TType.I32;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(NameMessageId);
        oprot.WriteFieldEnd();
      }
      if (__isset.descMessageId) {
        field.Name = "descMessageId";
        field.Type = TType.I32;
        field.ID = 20;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(DescMessageId);
        oprot.WriteFieldEnd();
      }
      if (SkillIcon != null && __isset.skillIcon) {
        field.Name = "skillIcon";
        field.Type = TType.String;
        field.ID = 30;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(SkillIcon);
        oprot.WriteFieldEnd();
      }
      if (__isset.actionId) {
        field.Name = "actionId";
        field.Type = TType.I32;
        field.ID = 40;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(ActionId);
        oprot.WriteFieldEnd();
      }
      if (__isset.priority) {
        field.Name = "priority";
        field.Type = TType.I32;
        field.ID = 50;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Priority);
        oprot.WriteFieldEnd();
      }
      if (__isset.skillType) {
        field.Name = "skillType";
        field.Type = TType.I32;
        field.ID = 60;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(SkillType);
        oprot.WriteFieldEnd();
      }
      if (__isset.quality) {
        field.Name = "quality";
        field.Type = TType.I32;
        field.ID = 70;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Quality);
        oprot.WriteFieldEnd();
      }
      if (__isset.level) {
        field.Name = "level";
        field.Type = TType.I32;
        field.ID = 80;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Level);
        oprot.WriteFieldEnd();
      }
      if (__isset.cd) {
        field.Name = "cd";
        field.Type = TType.I32;
        field.ID = 90;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Cd);
        oprot.WriteFieldEnd();
      }
      if (__isset.addCd) {
        field.Name = "addCd";
        field.Type = TType.I32;
        field.ID = 100;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(AddCd);
        oprot.WriteFieldEnd();
      }
      if (__isset.perLimitId) {
        field.Name = "perLimitId";
        field.Type = TType.I32;
        field.ID = 110;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(PerLimitId);
        oprot.WriteFieldEnd();
      }
      if (__isset.perFuncId) {
        field.Name = "perFuncId";
        field.Type = TType.I32;
        field.ID = 120;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(PerFuncId);
        oprot.WriteFieldEnd();
      }
      if (__isset.targeteId) {
        field.Name = "targeteId";
        field.Type = TType.I32;
        field.ID = 130;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(TargeteId);
        oprot.WriteFieldEnd();
      }
      if (__isset.limitId) {
        field.Name = "limitId";
        field.Type = TType.I32;
        field.ID = 140;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(LimitId);
        oprot.WriteFieldEnd();
      }
      if (__isset.funcId) {
        field.Name = "funcId";
        field.Type = TType.I32;
        field.ID = 150;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(FuncId);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("SkillConfig(");
      sb.Append("Id: ");
      sb.Append(Id);
      sb.Append(",NameMessageId: ");
      sb.Append(NameMessageId);
      sb.Append(",DescMessageId: ");
      sb.Append(DescMessageId);
      sb.Append(",SkillIcon: ");
      sb.Append(SkillIcon);
      sb.Append(",ActionId: ");
      sb.Append(ActionId);
      sb.Append(",Priority: ");
      sb.Append(Priority);
      sb.Append(",SkillType: ");
      sb.Append(SkillType);
      sb.Append(",Quality: ");
      sb.Append(Quality);
      sb.Append(",Level: ");
      sb.Append(Level);
      sb.Append(",Cd: ");
      sb.Append(Cd);
      sb.Append(",AddCd: ");
      sb.Append(AddCd);
      sb.Append(",PerLimitId: ");
      sb.Append(PerLimitId);
      sb.Append(",PerFuncId: ");
      sb.Append(PerFuncId);
      sb.Append(",TargeteId: ");
      sb.Append(TargeteId);
      sb.Append(",LimitId: ");
      sb.Append(LimitId);
      sb.Append(",FuncId: ");
      sb.Append(FuncId);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
