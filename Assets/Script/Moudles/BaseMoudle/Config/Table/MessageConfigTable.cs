/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Config.Table
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class MessageConfigTable : TBase
  {
    private Dictionary<string, Dictionary<int, string>> _messageMap;

    public Dictionary<string, Dictionary<int, string>> MessageMap
    {
      get
      {
        return _messageMap;
      }
      set
      {
        __isset.messageMap = true;
        this._messageMap = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool messageMap;
    }

    public MessageConfigTable() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Map) {
              {
                MessageMap = new Dictionary<string, Dictionary<int, string>>();
                TMap _map30 = iprot.ReadMapBegin();
                for( int _i31 = 0; _i31 < _map30.Count; ++_i31)
                {
                  string _key32;
                  Dictionary<int, string> _val33;
                  _key32 = iprot.ReadString();
                  {
                    _val33 = new Dictionary<int, string>();
                    TMap _map34 = iprot.ReadMapBegin();
                    for( int _i35 = 0; _i35 < _map34.Count; ++_i35)
                    {
                      int _key36;
                      string _val37;
                      _key36 = iprot.ReadI32();
                      _val37 = iprot.ReadString();
                      _val33[_key36] = _val37;
                    }
                    iprot.ReadMapEnd();
                  }
                  MessageMap[_key32] = _val33;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("MessageConfigTable");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (MessageMap != null && __isset.messageMap) {
        field.Name = "messageMap";
        field.Type = TType.Map;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.String, TType.Map, MessageMap.Count));
          foreach (string _iter38 in MessageMap.Keys)
          {
            oprot.WriteString(_iter38);
            {
              oprot.WriteMapBegin(new TMap(TType.I32, TType.String, MessageMap[_iter38].Count));
              foreach (int _iter39 in MessageMap[_iter38].Keys)
              {
                oprot.WriteI32(_iter39);
                oprot.WriteString(MessageMap[_iter38][_iter39]);
              }
              oprot.WriteMapEnd();
            }
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("MessageConfigTable(");
      sb.Append("MessageMap: ");
      sb.Append(MessageMap);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
