/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Config.Table
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class RatioGameConfigTable : TBase
  {
    private List<Config.MiniGameHardConfig> _ballCount;
    private List<Config.MiniGameHardConfig> _ballColor;
    private List<Config.MiniGameHardConfig> _ballMaterial;
    private List<Config.MiniGameHardConfig> _ballSpeed;

    public List<Config.MiniGameHardConfig> BallCount
    {
      get
      {
        return _ballCount;
      }
      set
      {
        __isset.ballCount = true;
        this._ballCount = value;
      }
    }

    public List<Config.MiniGameHardConfig> BallColor
    {
      get
      {
        return _ballColor;
      }
      set
      {
        __isset.ballColor = true;
        this._ballColor = value;
      }
    }

    public List<Config.MiniGameHardConfig> BallMaterial
    {
      get
      {
        return _ballMaterial;
      }
      set
      {
        __isset.ballMaterial = true;
        this._ballMaterial = value;
      }
    }

    public List<Config.MiniGameHardConfig> BallSpeed
    {
      get
      {
        return _ballSpeed;
      }
      set
      {
        __isset.ballSpeed = true;
        this._ballSpeed = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool ballCount;
      public bool ballColor;
      public bool ballMaterial;
      public bool ballSpeed;
    }

    public RatioGameConfigTable() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.List) {
              {
                BallCount = new List<Config.MiniGameHardConfig>();
                TList _list74 = iprot.ReadListBegin();
                for( int _i75 = 0; _i75 < _list74.Count; ++_i75)
                {
                  Config.MiniGameHardConfig _elem76 = new Config.MiniGameHardConfig();
                  _elem76 = new Config.MiniGameHardConfig();
                  _elem76.Read(iprot);
                  BallCount.Add(_elem76);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.List) {
              {
                BallColor = new List<Config.MiniGameHardConfig>();
                TList _list77 = iprot.ReadListBegin();
                for( int _i78 = 0; _i78 < _list77.Count; ++_i78)
                {
                  Config.MiniGameHardConfig _elem79 = new Config.MiniGameHardConfig();
                  _elem79 = new Config.MiniGameHardConfig();
                  _elem79.Read(iprot);
                  BallColor.Add(_elem79);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.List) {
              {
                BallMaterial = new List<Config.MiniGameHardConfig>();
                TList _list80 = iprot.ReadListBegin();
                for( int _i81 = 0; _i81 < _list80.Count; ++_i81)
                {
                  Config.MiniGameHardConfig _elem82 = new Config.MiniGameHardConfig();
                  _elem82 = new Config.MiniGameHardConfig();
                  _elem82.Read(iprot);
                  BallMaterial.Add(_elem82);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.List) {
              {
                BallSpeed = new List<Config.MiniGameHardConfig>();
                TList _list83 = iprot.ReadListBegin();
                for( int _i84 = 0; _i84 < _list83.Count; ++_i84)
                {
                  Config.MiniGameHardConfig _elem85 = new Config.MiniGameHardConfig();
                  _elem85 = new Config.MiniGameHardConfig();
                  _elem85.Read(iprot);
                  BallSpeed.Add(_elem85);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("RatioGameConfigTable");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (BallCount != null && __isset.ballCount) {
        field.Name = "ballCount";
        field.Type = TType.List;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, BallCount.Count));
          foreach (Config.MiniGameHardConfig _iter86 in BallCount)
          {
            _iter86.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (BallColor != null && __isset.ballColor) {
        field.Name = "ballColor";
        field.Type = TType.List;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, BallColor.Count));
          foreach (Config.MiniGameHardConfig _iter87 in BallColor)
          {
            _iter87.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (BallMaterial != null && __isset.ballMaterial) {
        field.Name = "ballMaterial";
        field.Type = TType.List;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, BallMaterial.Count));
          foreach (Config.MiniGameHardConfig _iter88 in BallMaterial)
          {
            _iter88.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (BallSpeed != null && __isset.ballSpeed) {
        field.Name = "ballSpeed";
        field.Type = TType.List;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, BallSpeed.Count));
          foreach (Config.MiniGameHardConfig _iter89 in BallSpeed)
          {
            _iter89.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("RatioGameConfigTable(");
      sb.Append("BallCount: ");
      sb.Append(BallCount);
      sb.Append(",BallColor: ");
      sb.Append(BallColor);
      sb.Append(",BallMaterial: ");
      sb.Append(BallMaterial);
      sb.Append(",BallSpeed: ");
      sb.Append(BallSpeed);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
