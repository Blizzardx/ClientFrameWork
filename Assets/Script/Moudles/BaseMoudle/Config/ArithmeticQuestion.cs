/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Config
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class ArithmeticQuestion : TBase
  {
    private double _difficulty;
    private string _optionContent;
    private List<ArithmeticItem> _itemList;

    public double Difficulty
    {
      get
      {
        return _difficulty;
      }
      set
      {
        __isset.difficulty = true;
        this._difficulty = value;
      }
    }

    public string OptionContent
    {
      get
      {
        return _optionContent;
      }
      set
      {
        __isset.optionContent = true;
        this._optionContent = value;
      }
    }

    public List<ArithmeticItem> ItemList
    {
      get
      {
        return _itemList;
      }
      set
      {
        __isset.itemList = true;
        this._itemList = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool difficulty;
      public bool optionContent;
      public bool itemList;
    }

    public ArithmeticQuestion() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 10:
            if (field.Type == TType.Double) {
              Difficulty = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 20:
            if (field.Type == TType.String) {
              OptionContent = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 30:
            if (field.Type == TType.List) {
              {
                ItemList = new List<ArithmeticItem>();
                TList _list45 = iprot.ReadListBegin();
                for( int _i46 = 0; _i46 < _list45.Count; ++_i46)
                {
                  ArithmeticItem _elem47 = new ArithmeticItem();
                  _elem47 = new ArithmeticItem();
                  _elem47.Read(iprot);
                  ItemList.Add(_elem47);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("ArithmeticQuestion");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.difficulty) {
        field.Name = "difficulty";
        field.Type = TType.Double;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(Difficulty);
        oprot.WriteFieldEnd();
      }
      if (OptionContent != null && __isset.optionContent) {
        field.Name = "optionContent";
        field.Type = TType.String;
        field.ID = 20;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(OptionContent);
        oprot.WriteFieldEnd();
      }
      if (ItemList != null && __isset.itemList) {
        field.Name = "itemList";
        field.Type = TType.List;
        field.ID = 30;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, ItemList.Count));
          foreach (ArithmeticItem _iter48 in ItemList)
          {
            _iter48.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("ArithmeticQuestion(");
      sb.Append("Difficulty: ");
      sb.Append(Difficulty);
      sb.Append(",OptionContent: ");
      sb.Append(OptionContent);
      sb.Append(",ItemList: ");
      sb.Append(ItemList);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
