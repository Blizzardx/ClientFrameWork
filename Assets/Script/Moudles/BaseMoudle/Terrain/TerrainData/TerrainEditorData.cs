/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace TerrainEditor
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class TerrainEditorData : TBase
  {
    private int _iD;
    private string _mapName;
    private string _mapResName;
    private List<TerrainTriggerData> _triggerDataList;

    public int ID
    {
      get
      {
        return _iD;
      }
      set
      {
        __isset.iD = true;
        this._iD = value;
      }
    }

    public string MapName
    {
      get
      {
        return _mapName;
      }
      set
      {
        __isset.mapName = true;
        this._mapName = value;
      }
    }

    public string MapResName
    {
      get
      {
        return _mapResName;
      }
      set
      {
        __isset.mapResName = true;
        this._mapResName = value;
      }
    }

    public List<TerrainTriggerData> TriggerDataList
    {
      get
      {
        return _triggerDataList;
      }
      set
      {
        __isset.triggerDataList = true;
        this._triggerDataList = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool iD;
      public bool mapName;
      public bool mapResName;
      public bool triggerDataList;
    }

    public TerrainEditorData() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              ID = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              MapName = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              MapResName = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.List) {
              {
                TriggerDataList = new List<TerrainTriggerData>();
                TList _list0 = iprot.ReadListBegin();
                for( int _i1 = 0; _i1 < _list0.Count; ++_i1)
                {
                  TerrainTriggerData _elem2 = new TerrainTriggerData();
                  _elem2 = new TerrainTriggerData();
                  _elem2.Read(iprot);
                  TriggerDataList.Add(_elem2);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("TerrainEditorData");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.iD) {
        field.Name = "iD";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(ID);
        oprot.WriteFieldEnd();
      }
      if (MapName != null && __isset.mapName) {
        field.Name = "mapName";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(MapName);
        oprot.WriteFieldEnd();
      }
      if (MapResName != null && __isset.mapResName) {
        field.Name = "mapResName";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(MapResName);
        oprot.WriteFieldEnd();
      }
      if (TriggerDataList != null && __isset.triggerDataList) {
        field.Name = "triggerDataList";
        field.Type = TType.List;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, TriggerDataList.Count));
          foreach (TerrainTriggerData _iter3 in TriggerDataList)
          {
            _iter3.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("TerrainEditorData(");
      sb.Append("ID: ");
      sb.Append(ID);
      sb.Append(",MapName: ");
      sb.Append(MapName);
      sb.Append(",MapResName: ");
      sb.Append(MapResName);
      sb.Append(",TriggerDataList: ");
      sb.Append(TriggerDataList);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
