/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace TerrainEditor
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class PlayerProcessInfo : TBase
  {
    private int _stageType;
    private int _terrainDataType;
    private ThriftTransformData _playerTransformInfo;
    private bool _isResumeScene;
    private int _actionId;
    private int _exitSceneFuncId;
    private int _exitSceneStep2FuncId;
    private Dictionary<int, ThriftTransformData> _npcTransformInfoList;

    public int StageType
    {
      get
      {
        return _stageType;
      }
      set
      {
        __isset.stageType = true;
        this._stageType = value;
      }
    }

    public int TerrainDataType
    {
      get
      {
        return _terrainDataType;
      }
      set
      {
        __isset.terrainDataType = true;
        this._terrainDataType = value;
      }
    }

    public ThriftTransformData PlayerTransformInfo
    {
      get
      {
        return _playerTransformInfo;
      }
      set
      {
        __isset.playerTransformInfo = true;
        this._playerTransformInfo = value;
      }
    }

    public bool IsResumeScene
    {
      get
      {
        return _isResumeScene;
      }
      set
      {
        __isset.isResumeScene = true;
        this._isResumeScene = value;
      }
    }

    public int ActionId
    {
      get
      {
        return _actionId;
      }
      set
      {
        __isset.actionId = true;
        this._actionId = value;
      }
    }

    public int ExitSceneFuncId
    {
      get
      {
        return _exitSceneFuncId;
      }
      set
      {
        __isset.exitSceneFuncId = true;
        this._exitSceneFuncId = value;
      }
    }

    public int ExitSceneStep2FuncId
    {
      get
      {
        return _exitSceneStep2FuncId;
      }
      set
      {
        __isset.exitSceneStep2FuncId = true;
        this._exitSceneStep2FuncId = value;
      }
    }

    public Dictionary<int, ThriftTransformData> NpcTransformInfoList
    {
      get
      {
        return _npcTransformInfoList;
      }
      set
      {
        __isset.npcTransformInfoList = true;
        this._npcTransformInfoList = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool stageType;
      public bool terrainDataType;
      public bool playerTransformInfo;
      public bool isResumeScene;
      public bool actionId;
      public bool exitSceneFuncId;
      public bool exitSceneStep2FuncId;
      public bool npcTransformInfoList;
    }

    public PlayerProcessInfo() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 10:
            if (field.Type == TType.I32) {
              StageType = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 11:
            if (field.Type == TType.I32) {
              TerrainDataType = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 20:
            if (field.Type == TType.Struct) {
              PlayerTransformInfo = new ThriftTransformData();
              PlayerTransformInfo.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 30:
            if (field.Type == TType.Bool) {
              IsResumeScene = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 40:
            if (field.Type == TType.I32) {
              ActionId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 50:
            if (field.Type == TType.I32) {
              ExitSceneFuncId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 51:
            if (field.Type == TType.I32) {
              ExitSceneStep2FuncId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 60:
            if (field.Type == TType.Map) {
              {
                NpcTransformInfoList = new Dictionary<int, ThriftTransformData>();
                TMap _map12 = iprot.ReadMapBegin();
                for( int _i13 = 0; _i13 < _map12.Count; ++_i13)
                {
                  int _key14;
                  ThriftTransformData _val15;
                  _key14 = iprot.ReadI32();
                  _val15 = new ThriftTransformData();
                  _val15.Read(iprot);
                  NpcTransformInfoList[_key14] = _val15;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("PlayerProcessInfo");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.stageType) {
        field.Name = "stageType";
        field.Type = TType.I32;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(StageType);
        oprot.WriteFieldEnd();
      }
      if (__isset.terrainDataType) {
        field.Name = "terrainDataType";
        field.Type = TType.I32;
        field.ID = 11;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(TerrainDataType);
        oprot.WriteFieldEnd();
      }
      if (PlayerTransformInfo != null && __isset.playerTransformInfo) {
        field.Name = "playerTransformInfo";
        field.Type = TType.Struct;
        field.ID = 20;
        oprot.WriteFieldBegin(field);
        PlayerTransformInfo.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (__isset.isResumeScene) {
        field.Name = "isResumeScene";
        field.Type = TType.Bool;
        field.ID = 30;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(IsResumeScene);
        oprot.WriteFieldEnd();
      }
      if (__isset.actionId) {
        field.Name = "actionId";
        field.Type = TType.I32;
        field.ID = 40;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(ActionId);
        oprot.WriteFieldEnd();
      }
      if (__isset.exitSceneFuncId) {
        field.Name = "exitSceneFuncId";
        field.Type = TType.I32;
        field.ID = 50;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(ExitSceneFuncId);
        oprot.WriteFieldEnd();
      }
      if (__isset.exitSceneStep2FuncId) {
        field.Name = "exitSceneStep2FuncId";
        field.Type = TType.I32;
        field.ID = 51;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(ExitSceneStep2FuncId);
        oprot.WriteFieldEnd();
      }
      if (NpcTransformInfoList != null && __isset.npcTransformInfoList) {
        field.Name = "npcTransformInfoList";
        field.Type = TType.Map;
        field.ID = 60;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.I32, TType.Struct, NpcTransformInfoList.Count));
          foreach (int _iter16 in NpcTransformInfoList.Keys)
          {
            oprot.WriteI32(_iter16);
            NpcTransformInfoList[_iter16].Write(oprot);
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("PlayerProcessInfo(");
      sb.Append("StageType: ");
      sb.Append(StageType);
      sb.Append(",TerrainDataType: ");
      sb.Append(TerrainDataType);
      sb.Append(",PlayerTransformInfo: ");
      sb.Append(PlayerTransformInfo== null ? "<null>" : PlayerTransformInfo.ToString());
      sb.Append(",IsResumeScene: ");
      sb.Append(IsResumeScene);
      sb.Append(",ActionId: ");
      sb.Append(ActionId);
      sb.Append(",ExitSceneFuncId: ");
      sb.Append(ExitSceneFuncId);
      sb.Append(",ExitSceneStep2FuncId: ");
      sb.Append(ExitSceneStep2FuncId);
      sb.Append(",NpcTransformInfoList: ");
      sb.Append(NpcTransformInfoList);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
