/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace NetFramework.Auto
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class SystemInfo : TBase
  {
    private int _messageId;
    private List<string> _argv;
    private TipLevel _tipLevel;

    public int MessageId
    {
      get
      {
        return _messageId;
      }
      set
      {
        __isset.messageId = true;
        this._messageId = value;
      }
    }

    public List<string> Argv
    {
      get
      {
        return _argv;
      }
      set
      {
        __isset.argv = true;
        this._argv = value;
      }
    }

    public TipLevel TipLevel
    {
      get
      {
        return _tipLevel;
      }
      set
      {
        __isset.tipLevel = true;
        this._tipLevel = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool messageId;
      public bool argv;
      public bool tipLevel;
    }

    public SystemInfo() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              MessageId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.List) {
              {
                Argv = new List<string>();
                TList _list0 = iprot.ReadListBegin();
                for( int _i1 = 0; _i1 < _list0.Count; ++_i1)
                {
                  string _elem2 = null;
                  _elem2 = iprot.ReadString();
                  Argv.Add(_elem2);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.Struct) {
              TipLevel = new TipLevel();
              TipLevel.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("SystemInfo");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.messageId) {
        field.Name = "messageId";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(MessageId);
        oprot.WriteFieldEnd();
      }
      if (Argv != null && __isset.argv) {
        field.Name = "argv";
        field.Type = TType.List;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.String, Argv.Count));
          foreach (string _iter3 in Argv)
          {
            oprot.WriteString(_iter3);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (TipLevel != null && __isset.tipLevel) {
        field.Name = "tipLevel";
        field.Type = TType.Struct;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        TipLevel.Write(oprot);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("SystemInfo(");
      sb.Append("MessageId: ");
      sb.Append(MessageId);
      sb.Append(",Argv: ");
      sb.Append(Argv);
      sb.Append(",TipLevel: ");
      sb.Append(TipLevel== null ? "<null>" : TipLevel.ToString());
      sb.Append(")");
      return sb.ToString();
    }

  }

}
