/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace NetFramework.Auto
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class SCBeginLoadStageMsg : TBase
  {
    private Dictionary<int, List<long>> _heroGroup1List;
    private Dictionary<int, List<long>> _heroGroup2List;
    private Dictionary<int, List<long>> _heroGroup3List;

    public Dictionary<int, List<long>> HeroGroup1List
    {
      get
      {
        return _heroGroup1List;
      }
      set
      {
        __isset.heroGroup1List = true;
        this._heroGroup1List = value;
      }
    }

    public Dictionary<int, List<long>> HeroGroup2List
    {
      get
      {
        return _heroGroup2List;
      }
      set
      {
        __isset.heroGroup2List = true;
        this._heroGroup2List = value;
      }
    }

    public Dictionary<int, List<long>> HeroGroup3List
    {
      get
      {
        return _heroGroup3List;
      }
      set
      {
        __isset.heroGroup3List = true;
        this._heroGroup3List = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool heroGroup1List;
      public bool heroGroup2List;
      public bool heroGroup3List;
    }

    public SCBeginLoadStageMsg() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 10:
            if (field.Type == TType.Map) {
              {
                HeroGroup1List = new Dictionary<int, List<long>>();
                TMap _map8 = iprot.ReadMapBegin();
                for( int _i9 = 0; _i9 < _map8.Count; ++_i9)
                {
                  int _key10;
                  List<long> _val11;
                  _key10 = iprot.ReadI32();
                  {
                    _val11 = new List<long>();
                    TList _list12 = iprot.ReadListBegin();
                    for( int _i13 = 0; _i13 < _list12.Count; ++_i13)
                    {
                      long _elem14 = 0;
                      _elem14 = iprot.ReadI64();
                      _val11.Add(_elem14);
                    }
                    iprot.ReadListEnd();
                  }
                  HeroGroup1List[_key10] = _val11;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 20:
            if (field.Type == TType.Map) {
              {
                HeroGroup2List = new Dictionary<int, List<long>>();
                TMap _map15 = iprot.ReadMapBegin();
                for( int _i16 = 0; _i16 < _map15.Count; ++_i16)
                {
                  int _key17;
                  List<long> _val18;
                  _key17 = iprot.ReadI32();
                  {
                    _val18 = new List<long>();
                    TList _list19 = iprot.ReadListBegin();
                    for( int _i20 = 0; _i20 < _list19.Count; ++_i20)
                    {
                      long _elem21 = 0;
                      _elem21 = iprot.ReadI64();
                      _val18.Add(_elem21);
                    }
                    iprot.ReadListEnd();
                  }
                  HeroGroup2List[_key17] = _val18;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 30:
            if (field.Type == TType.Map) {
              {
                HeroGroup3List = new Dictionary<int, List<long>>();
                TMap _map22 = iprot.ReadMapBegin();
                for( int _i23 = 0; _i23 < _map22.Count; ++_i23)
                {
                  int _key24;
                  List<long> _val25;
                  _key24 = iprot.ReadI32();
                  {
                    _val25 = new List<long>();
                    TList _list26 = iprot.ReadListBegin();
                    for( int _i27 = 0; _i27 < _list26.Count; ++_i27)
                    {
                      long _elem28 = 0;
                      _elem28 = iprot.ReadI64();
                      _val25.Add(_elem28);
                    }
                    iprot.ReadListEnd();
                  }
                  HeroGroup3List[_key24] = _val25;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("SCBeginLoadStageMsg");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (HeroGroup1List != null && __isset.heroGroup1List) {
        field.Name = "heroGroup1List";
        field.Type = TType.Map;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.I32, TType.List, HeroGroup1List.Count));
          foreach (int _iter29 in HeroGroup1List.Keys)
          {
            oprot.WriteI32(_iter29);
            {
              oprot.WriteListBegin(new TList(TType.I64, HeroGroup1List[_iter29].Count));
              foreach (long _iter30 in HeroGroup1List[_iter29])
              {
                oprot.WriteI64(_iter30);
              }
              oprot.WriteListEnd();
            }
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (HeroGroup2List != null && __isset.heroGroup2List) {
        field.Name = "heroGroup2List";
        field.Type = TType.Map;
        field.ID = 20;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.I32, TType.List, HeroGroup2List.Count));
          foreach (int _iter31 in HeroGroup2List.Keys)
          {
            oprot.WriteI32(_iter31);
            {
              oprot.WriteListBegin(new TList(TType.I64, HeroGroup2List[_iter31].Count));
              foreach (long _iter32 in HeroGroup2List[_iter31])
              {
                oprot.WriteI64(_iter32);
              }
              oprot.WriteListEnd();
            }
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (HeroGroup3List != null && __isset.heroGroup3List) {
        field.Name = "heroGroup3List";
        field.Type = TType.Map;
        field.ID = 30;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.I32, TType.List, HeroGroup3List.Count));
          foreach (int _iter33 in HeroGroup3List.Keys)
          {
            oprot.WriteI32(_iter33);
            {
              oprot.WriteListBegin(new TList(TType.I64, HeroGroup3List[_iter33].Count));
              foreach (long _iter34 in HeroGroup3List[_iter33])
              {
                oprot.WriteI64(_iter34);
              }
              oprot.WriteListEnd();
            }
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("SCBeginLoadStageMsg(");
      sb.Append("HeroGroup1List: ");
      sb.Append(HeroGroup1List);
      sb.Append(",HeroGroup2List: ");
      sb.Append(HeroGroup2List);
      sb.Append(",HeroGroup3List: ");
      sb.Append(HeroGroup3List);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
