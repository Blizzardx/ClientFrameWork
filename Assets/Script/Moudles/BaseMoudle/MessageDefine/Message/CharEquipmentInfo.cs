/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace NetFramework.Auto
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class CharEquipmentInfo : TBase
  {
    private int _templateId;
    private long _uniqueId;
    private long _bringUpBeginTime;
    private sbyte _bringUpIndex;
    private int _bringUp1Count;
    private int _bringUp2Count;
    private int _bringUp3Count;
    private List<int> _gemIdList;

    public int TemplateId
    {
      get
      {
        return _templateId;
      }
      set
      {
        __isset.templateId = true;
        this._templateId = value;
      }
    }

    public long UniqueId
    {
      get
      {
        return _uniqueId;
      }
      set
      {
        __isset.uniqueId = true;
        this._uniqueId = value;
      }
    }

    public long BringUpBeginTime
    {
      get
      {
        return _bringUpBeginTime;
      }
      set
      {
        __isset.bringUpBeginTime = true;
        this._bringUpBeginTime = value;
      }
    }

    public sbyte BringUpIndex
    {
      get
      {
        return _bringUpIndex;
      }
      set
      {
        __isset.bringUpIndex = true;
        this._bringUpIndex = value;
      }
    }

    public int BringUp1Count
    {
      get
      {
        return _bringUp1Count;
      }
      set
      {
        __isset.bringUp1Count = true;
        this._bringUp1Count = value;
      }
    }

    public int BringUp2Count
    {
      get
      {
        return _bringUp2Count;
      }
      set
      {
        __isset.bringUp2Count = true;
        this._bringUp2Count = value;
      }
    }

    public int BringUp3Count
    {
      get
      {
        return _bringUp3Count;
      }
      set
      {
        __isset.bringUp3Count = true;
        this._bringUp3Count = value;
      }
    }

    public List<int> GemIdList
    {
      get
      {
        return _gemIdList;
      }
      set
      {
        __isset.gemIdList = true;
        this._gemIdList = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool templateId;
      public bool uniqueId;
      public bool bringUpBeginTime;
      public bool bringUpIndex;
      public bool bringUp1Count;
      public bool bringUp2Count;
      public bool bringUp3Count;
      public bool gemIdList;
    }

    public CharEquipmentInfo() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 10:
            if (field.Type == TType.I32) {
              TemplateId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 20:
            if (field.Type == TType.I64) {
              UniqueId = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 30:
            if (field.Type == TType.I64) {
              BringUpBeginTime = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 40:
            if (field.Type == TType.Byte) {
              BringUpIndex = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 50:
            if (field.Type == TType.I32) {
              BringUp1Count = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 60:
            if (field.Type == TType.I32) {
              BringUp2Count = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 70:
            if (field.Type == TType.I32) {
              BringUp3Count = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 80:
            if (field.Type == TType.List) {
              {
                GemIdList = new List<int>();
                TList _list4 = iprot.ReadListBegin();
                for( int _i5 = 0; _i5 < _list4.Count; ++_i5)
                {
                  int _elem6 = 0;
                  _elem6 = iprot.ReadI32();
                  GemIdList.Add(_elem6);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("CharEquipmentInfo");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.templateId) {
        field.Name = "templateId";
        field.Type = TType.I32;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(TemplateId);
        oprot.WriteFieldEnd();
      }
      if (__isset.uniqueId) {
        field.Name = "uniqueId";
        field.Type = TType.I64;
        field.ID = 20;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(UniqueId);
        oprot.WriteFieldEnd();
      }
      if (__isset.bringUpBeginTime) {
        field.Name = "bringUpBeginTime";
        field.Type = TType.I64;
        field.ID = 30;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(BringUpBeginTime);
        oprot.WriteFieldEnd();
      }
      if (__isset.bringUpIndex) {
        field.Name = "bringUpIndex";
        field.Type = TType.Byte;
        field.ID = 40;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(BringUpIndex);
        oprot.WriteFieldEnd();
      }
      if (__isset.bringUp1Count) {
        field.Name = "bringUp1Count";
        field.Type = TType.I32;
        field.ID = 50;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(BringUp1Count);
        oprot.WriteFieldEnd();
      }
      if (__isset.bringUp2Count) {
        field.Name = "bringUp2Count";
        field.Type = TType.I32;
        field.ID = 60;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(BringUp2Count);
        oprot.WriteFieldEnd();
      }
      if (__isset.bringUp3Count) {
        field.Name = "bringUp3Count";
        field.Type = TType.I32;
        field.ID = 70;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(BringUp3Count);
        oprot.WriteFieldEnd();
      }
      if (GemIdList != null && __isset.gemIdList) {
        field.Name = "gemIdList";
        field.Type = TType.List;
        field.ID = 80;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.I32, GemIdList.Count));
          foreach (int _iter7 in GemIdList)
          {
            oprot.WriteI32(_iter7);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("CharEquipmentInfo(");
      sb.Append("TemplateId: ");
      sb.Append(TemplateId);
      sb.Append(",UniqueId: ");
      sb.Append(UniqueId);
      sb.Append(",BringUpBeginTime: ");
      sb.Append(BringUpBeginTime);
      sb.Append(",BringUpIndex: ");
      sb.Append(BringUpIndex);
      sb.Append(",BringUp1Count: ");
      sb.Append(BringUp1Count);
      sb.Append(",BringUp2Count: ");
      sb.Append(BringUp2Count);
      sb.Append(",BringUp3Count: ");
      sb.Append(BringUp3Count);
      sb.Append(",GemIdList: ");
      sb.Append(GemIdList);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
