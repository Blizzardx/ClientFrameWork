

/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace NetFramework.Auto
{

  /// <summary>
  /// 阶段信息
  /// </summary>
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class MissionStepInfo : TBase
  {
    private sbyte _state;
    private int _counter1;
    private int _counter2;
    private int _counter3;

    /// <summary>
    /// 阶段任务状态
    /// </summary>
    public sbyte State
    {
      get
      {
        return _state;
      }
      set
      {
        __isset.state = true;
        this._state = value;
      }
    }

    /// <summary>
    /// 计数器数字
    /// </summary>
    public int Counter1
    {
      get
      {
        return _counter1;
      }
      set
      {
        __isset.counter1 = true;
        this._counter1 = value;
      }
    }

    /// <summary>
    /// 计数器数字
    /// </summary>
    public int Counter2
    {
      get
      {
        return _counter2;
      }
      set
      {
        __isset.counter2 = true;
        this._counter2 = value;
      }
    }

    /// <summary>
    /// 计数器数字
    /// </summary>
    public int Counter3
    {
      get
      {
        return _counter3;
      }
      set
      {
        __isset.counter3 = true;
        this._counter3 = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool state;
      public bool counter1;
      public bool counter2;
      public bool counter3;
    }

    public MissionStepInfo() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 10:
            if (field.Type == TType.Byte) {
              State = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 20:
            if (field.Type == TType.I32) {
              Counter1 = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 30:
            if (field.Type == TType.I32) {
              Counter2 = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 40:
            if (field.Type == TType.I32) {
              Counter3 = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("MissionStepInfo");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.state) {
        field.Name = "state";
        field.Type = TType.Byte;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(State);
        oprot.WriteFieldEnd();
      }
      if (__isset.counter1) {
        field.Name = "counter1";
        field.Type = TType.I32;
        field.ID = 20;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Counter1);
        oprot.WriteFieldEnd();
      }
      if (__isset.counter2) {
        field.Name = "counter2";
        field.Type = TType.I32;
        field.ID = 30;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Counter2);
        oprot.WriteFieldEnd();
      }
      if (__isset.counter3) {
        field.Name = "counter3";
        field.Type = TType.I32;
        field.ID = 40;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Counter3);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("MissionStepInfo(");
      sb.Append("State: ");
      sb.Append(State);
      sb.Append(",Counter1: ");
      sb.Append(Counter1);
      sb.Append(",Counter2: ");
      sb.Append(Counter2);
      sb.Append(",Counter3: ");
      sb.Append(Counter3);
      sb.Append(")");
      return sb.ToString();
    }

  }

}