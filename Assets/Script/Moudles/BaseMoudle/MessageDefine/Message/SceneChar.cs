/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace NetFramework.Auto
{

  /// <summary>
  /// 场景角色信息
  /// </summary>
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class SceneChar : TBase
  {
    private int _uid;
    private int _porfessionId;
    private string _name;
    private Common.Auto.ThriftVector3 _position;
    private Common.Auto.ThriftVector3 _rotation;

    /// <summary>
    /// uid
    /// </summary>
    public int Uid
    {
      get
      {
        return _uid;
      }
      set
      {
        __isset.uid = true;
        this._uid = value;
      }
    }

    /// <summary>
    /// 职位id
    /// </summary>
    public int PorfessionId
    {
      get
      {
        return _porfessionId;
      }
      set
      {
        __isset.porfessionId = true;
        this._porfessionId = value;
      }
    }

    /// <summary>
    /// 名字
    /// </summary>
    public string Name
    {
      get
      {
        return _name;
      }
      set
      {
        __isset.name = true;
        this._name = value;
      }
    }

    /// <summary>
    /// 位置
    /// </summary>
    public Common.Auto.ThriftVector3 Position
    {
      get
      {
        return _position;
      }
      set
      {
        __isset.position = true;
        this._position = value;
      }
    }

    /// <summary>
    /// 旋转
    /// </summary>
    public Common.Auto.ThriftVector3 Rotation
    {
      get
      {
        return _rotation;
      }
      set
      {
        __isset.rotation = true;
        this._rotation = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool uid;
      public bool porfessionId;
      public bool name;
      public bool position;
      public bool rotation;
    }

    public SceneChar() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 10:
            if (field.Type == TType.I32) {
              Uid = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 20:
            if (field.Type == TType.I32) {
              PorfessionId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 30:
            if (field.Type == TType.String) {
              Name = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 40:
            if (field.Type == TType.Struct) {
              Position = new Common.Auto.ThriftVector3();
              Position.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 50:
            if (field.Type == TType.Struct) {
              Rotation = new Common.Auto.ThriftVector3();
              Rotation.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("SceneChar");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.uid) {
        field.Name = "uid";
        field.Type = TType.I32;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Uid);
        oprot.WriteFieldEnd();
      }
      if (__isset.porfessionId) {
        field.Name = "porfessionId";
        field.Type = TType.I32;
        field.ID = 20;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(PorfessionId);
        oprot.WriteFieldEnd();
      }
      if (Name != null && __isset.name) {
        field.Name = "name";
        field.Type = TType.String;
        field.ID = 30;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Name);
        oprot.WriteFieldEnd();
      }
      if (Position != null && __isset.position) {
        field.Name = "position";
        field.Type = TType.Struct;
        field.ID = 40;
        oprot.WriteFieldBegin(field);
        Position.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (Rotation != null && __isset.rotation) {
        field.Name = "rotation";
        field.Type = TType.Struct;
        field.ID = 50;
        oprot.WriteFieldBegin(field);
        Rotation.Write(oprot);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("SceneChar(");
      sb.Append("Uid: ");
      sb.Append(Uid);
      sb.Append(",PorfessionId: ");
      sb.Append(PorfessionId);
      sb.Append(",Name: ");
      sb.Append(Name);
      sb.Append(",Position: ");
      sb.Append(Position== null ? "<null>" : Position.ToString());
      sb.Append(",Rotation: ");
      sb.Append(Rotation== null ? "<null>" : Rotation.ToString());
      sb.Append(")");
      return sb.ToString();
    }

  }

}
