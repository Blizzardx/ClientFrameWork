/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace NetWork.Auto
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class CharCounterInfo : TBase
  {
    private int _charId;
    private List<bool> _flagList;
    private List<sbyte> _bit8CounterList;
    private List<int> _bit32CounterList;

    public int CharId
    {
      get
      {
        return _charId;
      }
      set
      {
        __isset.charId = true;
        this._charId = value;
      }
    }

    public List<bool> FlagList
    {
      get
      {
        return _flagList;
      }
      set
      {
        __isset.flagList = true;
        this._flagList = value;
      }
    }

    public List<sbyte> Bit8CounterList
    {
      get
      {
        return _bit8CounterList;
      }
      set
      {
        __isset.bit8CounterList = true;
        this._bit8CounterList = value;
      }
    }

    public List<int> Bit32CounterList
    {
      get
      {
        return _bit32CounterList;
      }
      set
      {
        __isset.bit32CounterList = true;
        this._bit32CounterList = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool charId;
      public bool flagList;
      public bool bit8CounterList;
      public bool bit32CounterList;
    }

    public CharCounterInfo() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 10:
            if (field.Type == TType.I32) {
              CharId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 20:
            if (field.Type == TType.List) {
              {
                FlagList = new List<bool>();
                TList _list5 = iprot.ReadListBegin();
                for( int _i6 = 0; _i6 < _list5.Count; ++_i6)
                {
                  bool _elem7 = false;
                  _elem7 = iprot.ReadBool();
                  FlagList.Add(_elem7);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 30:
            if (field.Type == TType.List) {
              {
                Bit8CounterList = new List<sbyte>();
                TList _list8 = iprot.ReadListBegin();
                for( int _i9 = 0; _i9 < _list8.Count; ++_i9)
                {
                  sbyte _elem10 = 0;
                  _elem10 = iprot.ReadByte();
                  Bit8CounterList.Add(_elem10);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 40:
            if (field.Type == TType.List) {
              {
                Bit32CounterList = new List<int>();
                TList _list11 = iprot.ReadListBegin();
                for( int _i12 = 0; _i12 < _list11.Count; ++_i12)
                {
                  int _elem13 = 0;
                  _elem13 = iprot.ReadI32();
                  Bit32CounterList.Add(_elem13);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("CharCounterInfo");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.charId) {
        field.Name = "charId";
        field.Type = TType.I32;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(CharId);
        oprot.WriteFieldEnd();
      }
      if (FlagList != null && __isset.flagList) {
        field.Name = "flagList";
        field.Type = TType.List;
        field.ID = 20;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Bool, FlagList.Count));
          foreach (bool _iter14 in FlagList)
          {
            oprot.WriteBool(_iter14);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (Bit8CounterList != null && __isset.bit8CounterList) {
        field.Name = "bit8CounterList";
        field.Type = TType.List;
        field.ID = 30;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Byte, Bit8CounterList.Count));
          foreach (sbyte _iter15 in Bit8CounterList)
          {
            oprot.WriteByte(_iter15);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (Bit32CounterList != null && __isset.bit32CounterList) {
        field.Name = "bit32CounterList";
        field.Type = TType.List;
        field.ID = 40;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.I32, Bit32CounterList.Count));
          foreach (int _iter16 in Bit32CounterList)
          {
            oprot.WriteI32(_iter16);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("CharCounterInfo(");
      sb.Append("CharId: ");
      sb.Append(CharId);
      sb.Append(",FlagList: ");
      sb.Append(FlagList);
      sb.Append(",Bit8CounterList: ");
      sb.Append(Bit8CounterList);
      sb.Append(",Bit32CounterList: ");
      sb.Append(Bit32CounterList);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
