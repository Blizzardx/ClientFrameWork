/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace NetFramework.Auto
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class CSLoginMsg : TBase
  {
    private string _channelCode;
    private string _deviceId;
    private NetFramework.Auto.UserPasswordLogin _userpasswordLogin;

    public string ChannelCode
    {
      get
      {
        return _channelCode;
      }
      set
      {
        __isset.channelCode = true;
        this._channelCode = value;
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="NetFramework.Auto.Terminal"/>
    /// </summary>
    public NetFramework.Auto.Terminal Terminal { get; set; }

    /// <summary>
    /// 
    /// <seealso cref="NetFramework.Auto.OSType"/>
    /// </summary>
    public NetFramework.Auto.OSType OsType { get; set; }

    public string OsVersion { get; set; }

    public string DeviceModel { get; set; }

    public string DeviceId
    {
      get
      {
        return _deviceId;
      }
      set
      {
        __isset.deviceId = true;
        this._deviceId = value;
      }
    }

    public NetFramework.Auto.UserPasswordLogin UserpasswordLogin
    {
      get
      {
        return _userpasswordLogin;
      }
      set
      {
        __isset.userpasswordLogin = true;
        this._userpasswordLogin = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool channelCode;
      public bool deviceId;
      public bool userpasswordLogin;
    }

    public CSLoginMsg() {
    }

    public CSLoginMsg(NetFramework.Auto.Terminal terminal, NetFramework.Auto.OSType osType, string osVersion, string deviceModel) : this() {
      this.Terminal = terminal;
      this.OsType = osType;
      this.OsVersion = osVersion;
      this.DeviceModel = deviceModel;
    }

    public void Read (TProtocol iprot)
    {
      bool isset_terminal = false;
      bool isset_osType = false;
      bool isset_osVersion = false;
      bool isset_deviceModel = false;
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              ChannelCode = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I32) {
              Terminal = (NetFramework.Auto.Terminal)iprot.ReadI32();
              isset_terminal = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.I32) {
              OsType = (NetFramework.Auto.OSType)iprot.ReadI32();
              isset_osType = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.String) {
              OsVersion = iprot.ReadString();
              isset_osVersion = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.String) {
              DeviceModel = iprot.ReadString();
              isset_deviceModel = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.String) {
              DeviceId = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 20:
            if (field.Type == TType.Struct) {
              UserpasswordLogin = new NetFramework.Auto.UserPasswordLogin();
              UserpasswordLogin.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
      if (!isset_terminal)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      if (!isset_osType)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      if (!isset_osVersion)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      if (!isset_deviceModel)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("CSLoginMsg");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (ChannelCode != null && __isset.channelCode) {
        field.Name = "channelCode";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(ChannelCode);
        oprot.WriteFieldEnd();
      }
      field.Name = "terminal";
      field.Type = TType.I32;
      field.ID = 5;
      oprot.WriteFieldBegin(field);
      oprot.WriteI32((int)Terminal);
      oprot.WriteFieldEnd();
      field.Name = "osType";
      field.Type = TType.I32;
      field.ID = 6;
      oprot.WriteFieldBegin(field);
      oprot.WriteI32((int)OsType);
      oprot.WriteFieldEnd();
      field.Name = "osVersion";
      field.Type = TType.String;
      field.ID = 7;
      oprot.WriteFieldBegin(field);
      oprot.WriteString(OsVersion);
      oprot.WriteFieldEnd();
      field.Name = "deviceModel";
      field.Type = TType.String;
      field.ID = 8;
      oprot.WriteFieldBegin(field);
      oprot.WriteString(DeviceModel);
      oprot.WriteFieldEnd();
      if (DeviceId != null && __isset.deviceId) {
        field.Name = "deviceId";
        field.Type = TType.String;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(DeviceId);
        oprot.WriteFieldEnd();
      }
      if (UserpasswordLogin != null && __isset.userpasswordLogin) {
        field.Name = "userpasswordLogin";
        field.Type = TType.Struct;
        field.ID = 20;
        oprot.WriteFieldBegin(field);
        UserpasswordLogin.Write(oprot);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("CSLoginMsg(");
      sb.Append("ChannelCode: ");
      sb.Append(ChannelCode);
      sb.Append(",Terminal: ");
      sb.Append(Terminal);
      sb.Append(",OsType: ");
      sb.Append(OsType);
      sb.Append(",OsVersion: ");
      sb.Append(OsVersion);
      sb.Append(",DeviceModel: ");
      sb.Append(DeviceModel);
      sb.Append(",DeviceId: ");
      sb.Append(DeviceId);
      sb.Append(",UserpasswordLogin: ");
      sb.Append(UserpasswordLogin== null ? "<null>" : UserpasswordLogin.ToString());
      sb.Append(")");
      return sb.ToString();
    }

  }

}
