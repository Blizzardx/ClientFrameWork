/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace NetFramework.Auto
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class SCUseSkillMsg : TBase
  {
    private int _skillId;
    private long _userUniqueId;
    private List<long> _targetUniqueIdList;
    private int _randSeed;
    private double _attackPointTime;
    private sbyte _shakeLevel;

    public int SkillId
    {
      get
      {
        return _skillId;
      }
      set
      {
        __isset.skillId = true;
        this._skillId = value;
      }
    }

    public long UserUniqueId
    {
      get
      {
        return _userUniqueId;
      }
      set
      {
        __isset.userUniqueId = true;
        this._userUniqueId = value;
      }
    }

    public List<long> TargetUniqueIdList
    {
      get
      {
        return _targetUniqueIdList;
      }
      set
      {
        __isset.targetUniqueIdList = true;
        this._targetUniqueIdList = value;
      }
    }

    public int RandSeed
    {
      get
      {
        return _randSeed;
      }
      set
      {
        __isset.randSeed = true;
        this._randSeed = value;
      }
    }

    public double AttackPointTime
    {
      get
      {
        return _attackPointTime;
      }
      set
      {
        __isset.attackPointTime = true;
        this._attackPointTime = value;
      }
    }

    public sbyte ShakeLevel
    {
      get
      {
        return _shakeLevel;
      }
      set
      {
        __isset.shakeLevel = true;
        this._shakeLevel = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool skillId;
      public bool userUniqueId;
      public bool targetUniqueIdList;
      public bool randSeed;
      public bool attackPointTime;
      public bool shakeLevel;
    }

    public SCUseSkillMsg() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 10:
            if (field.Type == TType.I32) {
              SkillId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 20:
            if (field.Type == TType.I64) {
              UserUniqueId = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 30:
            if (field.Type == TType.List) {
              {
                TargetUniqueIdList = new List<long>();
                TList _list28 = iprot.ReadListBegin();
                for( int _i29 = 0; _i29 < _list28.Count; ++_i29)
                {
                  long _elem30 = 0;
                  _elem30 = iprot.ReadI64();
                  TargetUniqueIdList.Add(_elem30);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 40:
            if (field.Type == TType.I32) {
              RandSeed = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 41:
            if (field.Type == TType.Double) {
              AttackPointTime = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 50:
            if (field.Type == TType.Byte) {
              ShakeLevel = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("SCUseSkillMsg");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.skillId) {
        field.Name = "skillId";
        field.Type = TType.I32;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(SkillId);
        oprot.WriteFieldEnd();
      }
      if (__isset.userUniqueId) {
        field.Name = "userUniqueId";
        field.Type = TType.I64;
        field.ID = 20;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(UserUniqueId);
        oprot.WriteFieldEnd();
      }
      if (TargetUniqueIdList != null && __isset.targetUniqueIdList) {
        field.Name = "targetUniqueIdList";
        field.Type = TType.List;
        field.ID = 30;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.I64, TargetUniqueIdList.Count));
          foreach (long _iter31 in TargetUniqueIdList)
          {
            oprot.WriteI64(_iter31);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (__isset.randSeed) {
        field.Name = "randSeed";
        field.Type = TType.I32;
        field.ID = 40;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(RandSeed);
        oprot.WriteFieldEnd();
      }
      if (__isset.attackPointTime) {
        field.Name = "attackPointTime";
        field.Type = TType.Double;
        field.ID = 41;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(AttackPointTime);
        oprot.WriteFieldEnd();
      }
      if (__isset.shakeLevel) {
        field.Name = "shakeLevel";
        field.Type = TType.Byte;
        field.ID = 50;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(ShakeLevel);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("SCUseSkillMsg(");
      sb.Append("SkillId: ");
      sb.Append(SkillId);
      sb.Append(",UserUniqueId: ");
      sb.Append(UserUniqueId);
      sb.Append(",TargetUniqueIdList: ");
      sb.Append(TargetUniqueIdList);
      sb.Append(",RandSeed: ");
      sb.Append(RandSeed);
      sb.Append(",AttackPointTime: ");
      sb.Append(AttackPointTime);
      sb.Append(",ShakeLevel: ");
      sb.Append(ShakeLevel);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
