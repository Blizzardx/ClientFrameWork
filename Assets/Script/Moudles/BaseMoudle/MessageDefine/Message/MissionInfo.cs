

/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace NetFramework.Auto
{

  /// <summary>
  /// 任务信息
  /// </summary>
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class MissionInfo : TBase
  {
    private int _missionId;
    private sbyte _stepIndex;
    private MissionStepInfo _missionStepInfo;

    public int MissionId
    {
      get
      {
        return _missionId;
      }
      set
      {
        __isset.missionId = true;
        this._missionId = value;
      }
    }

    /// <summary>
    /// 步骤索引
    /// </summary>
    public sbyte StepIndex
    {
      get
      {
        return _stepIndex;
      }
      set
      {
        __isset.stepIndex = true;
        this._stepIndex = value;
      }
    }

    public MissionStepInfo MissionStepInfo
    {
      get
      {
        return _missionStepInfo;
      }
      set
      {
        __isset.missionStepInfo = true;
        this._missionStepInfo = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool missionId;
      public bool stepIndex;
      public bool missionStepInfo;
    }

    public MissionInfo() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 10:
            if (field.Type == TType.I32) {
              MissionId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 20:
            if (field.Type == TType.Byte) {
              StepIndex = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 30:
            if (field.Type == TType.Struct) {
              MissionStepInfo = new MissionStepInfo();
              MissionStepInfo.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("MissionInfo");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.missionId) {
        field.Name = "missionId";
        field.Type = TType.I32;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(MissionId);
        oprot.WriteFieldEnd();
      }
      if (__isset.stepIndex) {
        field.Name = "stepIndex";
        field.Type = TType.Byte;
        field.ID = 20;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(StepIndex);
        oprot.WriteFieldEnd();
      }
      if (MissionStepInfo != null && __isset.missionStepInfo) {
        field.Name = "missionStepInfo";
        field.Type = TType.Struct;
        field.ID = 30;
        oprot.WriteFieldBegin(field);
        MissionStepInfo.Write(oprot);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("MissionInfo(");
      sb.Append("MissionId: ");
      sb.Append(MissionId);
      sb.Append(",StepIndex: ");
      sb.Append(StepIndex);
      sb.Append(",MissionStepInfo: ");
      sb.Append(MissionStepInfo== null ? "<null>" : MissionStepInfo.ToString());
      sb.Append(")");
      return sb.ToString();
    }

  }

}