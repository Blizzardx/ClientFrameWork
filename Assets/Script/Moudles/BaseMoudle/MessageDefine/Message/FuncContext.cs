/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace NetFramework.Auto
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class FuncContext : TBase
  {
    private int _randSeed;
    private FuncUidSkillId _uidSkillId;
    private FuncUidBuffId _uidBuffId;
    private List<int> _attackDamageList;
    private sbyte _buffTransferCount;

    public int RandSeed
    {
      get
      {
        return _randSeed;
      }
      set
      {
        __isset.randSeed = true;
        this._randSeed = value;
      }
    }

    public FuncUidSkillId UidSkillId
    {
      get
      {
        return _uidSkillId;
      }
      set
      {
        __isset.uidSkillId = true;
        this._uidSkillId = value;
      }
    }

    public FuncUidBuffId UidBuffId
    {
      get
      {
        return _uidBuffId;
      }
      set
      {
        __isset.uidBuffId = true;
        this._uidBuffId = value;
      }
    }

    public List<int> AttackDamageList
    {
      get
      {
        return _attackDamageList;
      }
      set
      {
        __isset.attackDamageList = true;
        this._attackDamageList = value;
      }
    }

    public sbyte BuffTransferCount
    {
      get
      {
        return _buffTransferCount;
      }
      set
      {
        __isset.buffTransferCount = true;
        this._buffTransferCount = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool randSeed;
      public bool uidSkillId;
      public bool uidBuffId;
      public bool attackDamageList;
      public bool buffTransferCount;
    }

    public FuncContext() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 10:
            if (field.Type == TType.I32) {
              RandSeed = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 20:
            if (field.Type == TType.Struct) {
              UidSkillId = new FuncUidSkillId();
              UidSkillId.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 30:
            if (field.Type == TType.Struct) {
              UidBuffId = new FuncUidBuffId();
              UidBuffId.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 40:
            if (field.Type == TType.List) {
              {
                AttackDamageList = new List<int>();
                TList _list4 = iprot.ReadListBegin();
                for( int _i5 = 0; _i5 < _list4.Count; ++_i5)
                {
                  int _elem6 = 0;
                  _elem6 = iprot.ReadI32();
                  AttackDamageList.Add(_elem6);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 50:
            if (field.Type == TType.Byte) {
              BuffTransferCount = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("FuncContext");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.randSeed) {
        field.Name = "randSeed";
        field.Type = TType.I32;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(RandSeed);
        oprot.WriteFieldEnd();
      }
      if (UidSkillId != null && __isset.uidSkillId) {
        field.Name = "uidSkillId";
        field.Type = TType.Struct;
        field.ID = 20;
        oprot.WriteFieldBegin(field);
        UidSkillId.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (UidBuffId != null && __isset.uidBuffId) {
        field.Name = "uidBuffId";
        field.Type = TType.Struct;
        field.ID = 30;
        oprot.WriteFieldBegin(field);
        UidBuffId.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (AttackDamageList != null && __isset.attackDamageList) {
        field.Name = "attackDamageList";
        field.Type = TType.List;
        field.ID = 40;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.I32, AttackDamageList.Count));
          foreach (int _iter7 in AttackDamageList)
          {
            oprot.WriteI32(_iter7);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (__isset.buffTransferCount) {
        field.Name = "buffTransferCount";
        field.Type = TType.Byte;
        field.ID = 50;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(BuffTransferCount);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("FuncContext(");
      sb.Append("RandSeed: ");
      sb.Append(RandSeed);
      sb.Append(",UidSkillId: ");
      sb.Append(UidSkillId== null ? "<null>" : UidSkillId.ToString());
      sb.Append(",UidBuffId: ");
      sb.Append(UidBuffId== null ? "<null>" : UidBuffId.ToString());
      sb.Append(",AttackDamageList: ");
      sb.Append(AttackDamageList);
      sb.Append(",BuffTransferCount: ");
      sb.Append(BuffTransferCount);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
