/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace NetFramework.Auto
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class HeroEquipmentInfo : TBase
  {
    private int _templateId;
    private long _uniqueId;
    private long _putOnUid;
    private short _enhanceLevel;

    public int TemplateId
    {
      get
      {
        return _templateId;
      }
      set
      {
        __isset.templateId = true;
        this._templateId = value;
      }
    }

    public long UniqueId
    {
      get
      {
        return _uniqueId;
      }
      set
      {
        __isset.uniqueId = true;
        this._uniqueId = value;
      }
    }

    public long PutOnUid
    {
      get
      {
        return _putOnUid;
      }
      set
      {
        __isset.putOnUid = true;
        this._putOnUid = value;
      }
    }

    public short EnhanceLevel
    {
      get
      {
        return _enhanceLevel;
      }
      set
      {
        __isset.enhanceLevel = true;
        this._enhanceLevel = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool templateId;
      public bool uniqueId;
      public bool putOnUid;
      public bool enhanceLevel;
    }

    public HeroEquipmentInfo() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 10:
            if (field.Type == TType.I32) {
              TemplateId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 20:
            if (field.Type == TType.I64) {
              UniqueId = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 30:
            if (field.Type == TType.I64) {
              PutOnUid = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 40:
            if (field.Type == TType.I16) {
              EnhanceLevel = iprot.ReadI16();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("HeroEquipmentInfo");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.templateId) {
        field.Name = "templateId";
        field.Type = TType.I32;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(TemplateId);
        oprot.WriteFieldEnd();
      }
      if (__isset.uniqueId) {
        field.Name = "uniqueId";
        field.Type = TType.I64;
        field.ID = 20;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(UniqueId);
        oprot.WriteFieldEnd();
      }
      if (__isset.putOnUid) {
        field.Name = "putOnUid";
        field.Type = TType.I64;
        field.ID = 30;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(PutOnUid);
        oprot.WriteFieldEnd();
      }
      if (__isset.enhanceLevel) {
        field.Name = "enhanceLevel";
        field.Type = TType.I16;
        field.ID = 40;
        oprot.WriteFieldBegin(field);
        oprot.WriteI16(EnhanceLevel);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("HeroEquipmentInfo(");
      sb.Append("TemplateId: ");
      sb.Append(TemplateId);
      sb.Append(",UniqueId: ");
      sb.Append(UniqueId);
      sb.Append(",PutOnUid: ");
      sb.Append(PutOnUid);
      sb.Append(",EnhanceLevel: ");
      sb.Append(EnhanceLevel);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
