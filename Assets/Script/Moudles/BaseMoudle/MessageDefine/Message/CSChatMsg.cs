/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace NetFramework.Auto
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class CSChatMsg : TBase
  {
    private NetFramework.Auto.SendChatWhisper _sendChatWhisper;
    private NetFramework.Auto.SendChatCommon _sendChatCommon;

    /// <summary>
    /// 
    /// <seealso cref="NetFramework.Auto.ChatChannel"/>
    /// </summary>
    public NetFramework.Auto.ChatChannel ChatChannel { get; set; }

    public NetFramework.Auto.SendChatWhisper SendChatWhisper
    {
      get
      {
        return _sendChatWhisper;
      }
      set
      {
        __isset.sendChatWhisper = true;
        this._sendChatWhisper = value;
      }
    }

    public NetFramework.Auto.SendChatCommon SendChatCommon
    {
      get
      {
        return _sendChatCommon;
      }
      set
      {
        __isset.sendChatCommon = true;
        this._sendChatCommon = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool sendChatWhisper;
      public bool sendChatCommon;
    }

    public CSChatMsg() {
    }

    public CSChatMsg(NetFramework.Auto.ChatChannel chatChannel) : this() {
      this.ChatChannel = chatChannel;
    }

    public void Read (TProtocol iprot)
    {
      bool isset_chatChannel = false;
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 10:
            if (field.Type == TType.I32) {
              ChatChannel = (NetFramework.Auto.ChatChannel)iprot.ReadI32();
              isset_chatChannel = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 60:
            if (field.Type == TType.Struct) {
              SendChatWhisper = new NetFramework.Auto.SendChatWhisper();
              SendChatWhisper.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 70:
            if (field.Type == TType.Struct) {
              SendChatCommon = new NetFramework.Auto.SendChatCommon();
              SendChatCommon.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
      if (!isset_chatChannel)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("CSChatMsg");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      field.Name = "chatChannel";
      field.Type = TType.I32;
      field.ID = 10;
      oprot.WriteFieldBegin(field);
      oprot.WriteI32((int)ChatChannel);
      oprot.WriteFieldEnd();
      if (SendChatWhisper != null && __isset.sendChatWhisper) {
        field.Name = "sendChatWhisper";
        field.Type = TType.Struct;
        field.ID = 60;
        oprot.WriteFieldBegin(field);
        SendChatWhisper.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (SendChatCommon != null && __isset.sendChatCommon) {
        field.Name = "sendChatCommon";
        field.Type = TType.Struct;
        field.ID = 70;
        oprot.WriteFieldBegin(field);
        SendChatCommon.Write(oprot);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("CSChatMsg(");
      sb.Append("ChatChannel: ");
      sb.Append(ChatChannel);
      sb.Append(",SendChatWhisper: ");
      sb.Append(SendChatWhisper== null ? "<null>" : SendChatWhisper.ToString());
      sb.Append(",SendChatCommon: ");
      sb.Append(SendChatCommon== null ? "<null>" : SendChatCommon.ToString());
      sb.Append(")");
      return sb.ToString();
    }

  }

}
