/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace AdaptiveDifficulty
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class DifficultyConfig : TBase
  {
    private Dictionary<string, int> _talentEffect;
    private int _difficultyOffset;
    private int _difficultyRange;

    public Dictionary<string, int> TalentEffect
    {
      get
      {
        return _talentEffect;
      }
      set
      {
        __isset.talentEffect = true;
        this._talentEffect = value;
      }
    }

    public int DifficultyOffset
    {
      get
      {
        return _difficultyOffset;
      }
      set
      {
        __isset.difficultyOffset = true;
        this._difficultyOffset = value;
      }
    }

    public int DifficultyRange
    {
      get
      {
        return _difficultyRange;
      }
      set
      {
        __isset.difficultyRange = true;
        this._difficultyRange = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool talentEffect;
      public bool difficultyOffset;
      public bool difficultyRange;
    }

    public DifficultyConfig() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 10:
            if (field.Type == TType.Map) {
              {
                TalentEffect = new Dictionary<string, int>();
                TMap _map5 = iprot.ReadMapBegin();
                for( int _i6 = 0; _i6 < _map5.Count; ++_i6)
                {
                  string _key7;
                  int _val8;
                  _key7 = iprot.ReadString();
                  _val8 = iprot.ReadI32();
                  TalentEffect[_key7] = _val8;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 20:
            if (field.Type == TType.I32) {
              DifficultyOffset = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 30:
            if (field.Type == TType.I32) {
              DifficultyRange = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("DifficultyConfig");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (TalentEffect != null && __isset.talentEffect) {
        field.Name = "talentEffect";
        field.Type = TType.Map;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.String, TType.I32, TalentEffect.Count));
          foreach (string _iter9 in TalentEffect.Keys)
          {
            oprot.WriteString(_iter9);
            oprot.WriteI32(TalentEffect[_iter9]);
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (__isset.difficultyOffset) {
        field.Name = "difficultyOffset";
        field.Type = TType.I32;
        field.ID = 20;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(DifficultyOffset);
        oprot.WriteFieldEnd();
      }
      if (__isset.difficultyRange) {
        field.Name = "difficultyRange";
        field.Type = TType.I32;
        field.ID = 30;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(DifficultyRange);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("DifficultyConfig(");
      sb.Append("TalentEffect: ");
      sb.Append(TalentEffect);
      sb.Append(",DifficultyOffset: ");
      sb.Append(DifficultyOffset);
      sb.Append(",DifficultyRange: ");
      sb.Append(DifficultyRange);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
