/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace ActionEditor
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class AnimCharFrameConfig : TBase
  {
    private ECharType _charType;
    private List<string> _lstAnimName;

    /// <summary>
    /// 
    /// <seealso cref="ECharType"/>
    /// </summary>
    public ECharType CharType
    {
      get
      {
        return _charType;
      }
      set
      {
        __isset.charType = true;
        this._charType = value;
      }
    }

    public List<string> LstAnimName
    {
      get
      {
        return _lstAnimName;
      }
      set
      {
        __isset.lstAnimName = true;
        this._lstAnimName = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool charType;
      public bool lstAnimName;
    }

    public AnimCharFrameConfig() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              CharType = (ECharType)iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.List) {
              {
                LstAnimName = new List<string>();
                TList _list8 = iprot.ReadListBegin();
                for( int _i9 = 0; _i9 < _list8.Count; ++_i9)
                {
                  string _elem10 = null;
                  _elem10 = iprot.ReadString();
                  LstAnimName.Add(_elem10);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("AnimCharFrameConfig");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.charType) {
        field.Name = "charType";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)CharType);
        oprot.WriteFieldEnd();
      }
      if (LstAnimName != null && __isset.lstAnimName) {
        field.Name = "lstAnimName";
        field.Type = TType.List;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.String, LstAnimName.Count));
          foreach (string _iter11 in LstAnimName)
          {
            oprot.WriteString(_iter11);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("AnimCharFrameConfig(");
      sb.Append("CharType: ");
      sb.Append(CharType);
      sb.Append(",LstAnimName: ");
      sb.Append(LstAnimName);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
