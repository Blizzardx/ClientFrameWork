/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace ActionEditor
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class PlayAudioFrameConfig : TBase
  {
    private string _audioSource;
    private bool _isLoop;
    private bool _isAttach;
    private Common.Auto.ThriftVector3 _playPosition;
    private EntityType _entityType;
    private int _attachNpcId;
    private bool _isCareGender;
    private string _paramAudioSource;

    public string AudioSource
    {
      get
      {
        return _audioSource;
      }
      set
      {
        __isset.audioSource = true;
        this._audioSource = value;
      }
    }

    public bool IsLoop
    {
      get
      {
        return _isLoop;
      }
      set
      {
        __isset.isLoop = true;
        this._isLoop = value;
      }
    }

    public bool IsAttach
    {
      get
      {
        return _isAttach;
      }
      set
      {
        __isset.isAttach = true;
        this._isAttach = value;
      }
    }

    public Common.Auto.ThriftVector3 PlayPosition
    {
      get
      {
        return _playPosition;
      }
      set
      {
        __isset.playPosition = true;
        this._playPosition = value;
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="EntityType"/>
    /// </summary>
    public EntityType EntityType
    {
      get
      {
        return _entityType;
      }
      set
      {
        __isset.entityType = true;
        this._entityType = value;
      }
    }

    public int AttachNpcId
    {
      get
      {
        return _attachNpcId;
      }
      set
      {
        __isset.attachNpcId = true;
        this._attachNpcId = value;
      }
    }

    public bool IsCareGender
    {
      get
      {
        return _isCareGender;
      }
      set
      {
        __isset.isCareGender = true;
        this._isCareGender = value;
      }
    }

    public string ParamAudioSource
    {
      get
      {
        return _paramAudioSource;
      }
      set
      {
        __isset.paramAudioSource = true;
        this._paramAudioSource = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool audioSource;
      public bool isLoop;
      public bool isAttach;
      public bool playPosition;
      public bool entityType;
      public bool attachNpcId;
      public bool isCareGender;
      public bool paramAudioSource;
    }

    public PlayAudioFrameConfig() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              AudioSource = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Bool) {
              IsLoop = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.Bool) {
              IsAttach = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.Struct) {
              PlayPosition = new Common.Auto.ThriftVector3();
              PlayPosition.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I32) {
              EntityType = (EntityType)iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.I32) {
              AttachNpcId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.Bool) {
              IsCareGender = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.String) {
              ParamAudioSource = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("PlayAudioFrameConfig");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (AudioSource != null && __isset.audioSource) {
        field.Name = "audioSource";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(AudioSource);
        oprot.WriteFieldEnd();
      }
      if (__isset.isLoop) {
        field.Name = "isLoop";
        field.Type = TType.Bool;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(IsLoop);
        oprot.WriteFieldEnd();
      }
      if (__isset.isAttach) {
        field.Name = "isAttach";
        field.Type = TType.Bool;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(IsAttach);
        oprot.WriteFieldEnd();
      }
      if (PlayPosition != null && __isset.playPosition) {
        field.Name = "playPosition";
        field.Type = TType.Struct;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        PlayPosition.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (__isset.entityType) {
        field.Name = "entityType";
        field.Type = TType.I32;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)EntityType);
        oprot.WriteFieldEnd();
      }
      if (__isset.attachNpcId) {
        field.Name = "attachNpcId";
        field.Type = TType.I32;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(AttachNpcId);
        oprot.WriteFieldEnd();
      }
      if (__isset.isCareGender) {
        field.Name = "isCareGender";
        field.Type = TType.Bool;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(IsCareGender);
        oprot.WriteFieldEnd();
      }
      if (ParamAudioSource != null && __isset.paramAudioSource) {
        field.Name = "paramAudioSource";
        field.Type = TType.String;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(ParamAudioSource);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("PlayAudioFrameConfig(");
      sb.Append("AudioSource: ");
      sb.Append(AudioSource);
      sb.Append(",IsLoop: ");
      sb.Append(IsLoop);
      sb.Append(",IsAttach: ");
      sb.Append(IsAttach);
      sb.Append(",PlayPosition: ");
      sb.Append(PlayPosition== null ? "<null>" : PlayPosition.ToString());
      sb.Append(",EntityType: ");
      sb.Append(EntityType);
      sb.Append(",AttachNpcId: ");
      sb.Append(AttachNpcId);
      sb.Append(",IsCareGender: ");
      sb.Append(IsCareGender);
      sb.Append(",ParamAudioSource: ");
      sb.Append(ParamAudioSource);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
