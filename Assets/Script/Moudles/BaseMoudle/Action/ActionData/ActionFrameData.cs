/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace ActionEditor
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class ActionFrameData : TBase
  {
    private double _time;
    private int _type;
    private List<int> _targetIDs;
    private ShakeCameraFrameConfig _shakeCameraFrame;
    private MoveCameraFrameConfig _moveCameraFrame;
    private PlayAudioFrameConfig _playAudioFrame;
    private boolCommonConfig _boolFrame;
    private stringCommonConfig _stringFrame;
    private MoveTransformFrameConfig _moveTransformFrame;
    private Common.Auto.ThriftVector3 _vector3Frame;
    private AddNpcFrameConfig _addNpcFrame;
    private Runtime_CreateEffectFrameConfig _runtime_CreateEffect;
    private Runtime_MoveEffectFrameConfig _runtime_MoveEffect;
    private Runtime_AttackExecFrameConfig _runtime_AttackExec;
    private Runtime_RemoveEffectFrameConfig _runtime_RemoveEffect;
    private MoveCharFrameConfig _movecharFrame;
    private AddStateEffectFrameConfig _addStateEffectFrame;
    private AddUIFrameConfig _addUIFrame;
    private RemoveUIFrameConfig _removeUIFrame;
    private EntityPlayAnimationConfig _entityPlayAnim;
    private AnimCharFrameConfig _animcharFrame;
    private RotateCharFrameConfig _rotcharFrame;
    private RotateCameraFrameConfig _rotCameraFrame;
    private ObjectTransformFrameConfig _objTransformFrame;
    private FuncMethodFrameConfig _funcMethodFrame;
    private StopAudioFrameConfig _stopAudioFrame;

    public double Time
    {
      get
      {
        return _time;
      }
      set
      {
        __isset.time = true;
        this._time = value;
      }
    }

    public int Type
    {
      get
      {
        return _type;
      }
      set
      {
        __isset.type = true;
        this._type = value;
      }
    }

    public List<int> TargetIDs
    {
      get
      {
        return _targetIDs;
      }
      set
      {
        __isset.targetIDs = true;
        this._targetIDs = value;
      }
    }

    public ShakeCameraFrameConfig ShakeCameraFrame
    {
      get
      {
        return _shakeCameraFrame;
      }
      set
      {
        __isset.shakeCameraFrame = true;
        this._shakeCameraFrame = value;
      }
    }

    public MoveCameraFrameConfig MoveCameraFrame
    {
      get
      {
        return _moveCameraFrame;
      }
      set
      {
        __isset.moveCameraFrame = true;
        this._moveCameraFrame = value;
      }
    }

    public PlayAudioFrameConfig PlayAudioFrame
    {
      get
      {
        return _playAudioFrame;
      }
      set
      {
        __isset.playAudioFrame = true;
        this._playAudioFrame = value;
      }
    }

    public boolCommonConfig BoolFrame
    {
      get
      {
        return _boolFrame;
      }
      set
      {
        __isset.boolFrame = true;
        this._boolFrame = value;
      }
    }

    public stringCommonConfig StringFrame
    {
      get
      {
        return _stringFrame;
      }
      set
      {
        __isset.stringFrame = true;
        this._stringFrame = value;
      }
    }

    public MoveTransformFrameConfig MoveTransformFrame
    {
      get
      {
        return _moveTransformFrame;
      }
      set
      {
        __isset.moveTransformFrame = true;
        this._moveTransformFrame = value;
      }
    }

    public Common.Auto.ThriftVector3 Vector3Frame
    {
      get
      {
        return _vector3Frame;
      }
      set
      {
        __isset.vector3Frame = true;
        this._vector3Frame = value;
      }
    }

    public AddNpcFrameConfig AddNpcFrame
    {
      get
      {
        return _addNpcFrame;
      }
      set
      {
        __isset.addNpcFrame = true;
        this._addNpcFrame = value;
      }
    }

    public Runtime_CreateEffectFrameConfig Runtime_CreateEffect
    {
      get
      {
        return _runtime_CreateEffect;
      }
      set
      {
        __isset.runtime_CreateEffect = true;
        this._runtime_CreateEffect = value;
      }
    }

    public Runtime_MoveEffectFrameConfig Runtime_MoveEffect
    {
      get
      {
        return _runtime_MoveEffect;
      }
      set
      {
        __isset.runtime_MoveEffect = true;
        this._runtime_MoveEffect = value;
      }
    }

    public Runtime_AttackExecFrameConfig Runtime_AttackExec
    {
      get
      {
        return _runtime_AttackExec;
      }
      set
      {
        __isset.runtime_AttackExec = true;
        this._runtime_AttackExec = value;
      }
    }

    public Runtime_RemoveEffectFrameConfig Runtime_RemoveEffect
    {
      get
      {
        return _runtime_RemoveEffect;
      }
      set
      {
        __isset.runtime_RemoveEffect = true;
        this._runtime_RemoveEffect = value;
      }
    }

    public MoveCharFrameConfig MovecharFrame
    {
      get
      {
        return _movecharFrame;
      }
      set
      {
        __isset.movecharFrame = true;
        this._movecharFrame = value;
      }
    }

    public AddStateEffectFrameConfig AddStateEffectFrame
    {
      get
      {
        return _addStateEffectFrame;
      }
      set
      {
        __isset.addStateEffectFrame = true;
        this._addStateEffectFrame = value;
      }
    }

    public AddUIFrameConfig AddUIFrame
    {
      get
      {
        return _addUIFrame;
      }
      set
      {
        __isset.addUIFrame = true;
        this._addUIFrame = value;
      }
    }

    public RemoveUIFrameConfig RemoveUIFrame
    {
      get
      {
        return _removeUIFrame;
      }
      set
      {
        __isset.removeUIFrame = true;
        this._removeUIFrame = value;
      }
    }

    public EntityPlayAnimationConfig EntityPlayAnim
    {
      get
      {
        return _entityPlayAnim;
      }
      set
      {
        __isset.entityPlayAnim = true;
        this._entityPlayAnim = value;
      }
    }

    public AnimCharFrameConfig AnimcharFrame
    {
      get
      {
        return _animcharFrame;
      }
      set
      {
        __isset.animcharFrame = true;
        this._animcharFrame = value;
      }
    }

    public RotateCharFrameConfig RotcharFrame
    {
      get
      {
        return _rotcharFrame;
      }
      set
      {
        __isset.rotcharFrame = true;
        this._rotcharFrame = value;
      }
    }

    public RotateCameraFrameConfig RotCameraFrame
    {
      get
      {
        return _rotCameraFrame;
      }
      set
      {
        __isset.rotCameraFrame = true;
        this._rotCameraFrame = value;
      }
    }

    public ObjectTransformFrameConfig ObjTransformFrame
    {
      get
      {
        return _objTransformFrame;
      }
      set
      {
        __isset.objTransformFrame = true;
        this._objTransformFrame = value;
      }
    }

    public FuncMethodFrameConfig FuncMethodFrame
    {
      get
      {
        return _funcMethodFrame;
      }
      set
      {
        __isset.funcMethodFrame = true;
        this._funcMethodFrame = value;
      }
    }

    public StopAudioFrameConfig StopAudioFrame
    {
      get
      {
        return _stopAudioFrame;
      }
      set
      {
        __isset.stopAudioFrame = true;
        this._stopAudioFrame = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool time;
      public bool type;
      public bool targetIDs;
      public bool shakeCameraFrame;
      public bool moveCameraFrame;
      public bool playAudioFrame;
      public bool boolFrame;
      public bool stringFrame;
      public bool moveTransformFrame;
      public bool vector3Frame;
      public bool addNpcFrame;
      public bool runtime_CreateEffect;
      public bool runtime_MoveEffect;
      public bool runtime_AttackExec;
      public bool runtime_RemoveEffect;
      public bool movecharFrame;
      public bool addStateEffectFrame;
      public bool addUIFrame;
      public bool removeUIFrame;
      public bool entityPlayAnim;
      public bool animcharFrame;
      public bool rotcharFrame;
      public bool rotCameraFrame;
      public bool objTransformFrame;
      public bool funcMethodFrame;
      public bool stopAudioFrame;
    }

    public ActionFrameData() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Double) {
              Time = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              Type = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.List) {
              {
                TargetIDs = new List<int>();
                TList _list12 = iprot.ReadListBegin();
                for( int _i13 = 0; _i13 < _list12.Count; ++_i13)
                {
                  int _elem14 = 0;
                  _elem14 = iprot.ReadI32();
                  TargetIDs.Add(_elem14);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.Struct) {
              ShakeCameraFrame = new ShakeCameraFrameConfig();
              ShakeCameraFrame.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 20:
            if (field.Type == TType.Struct) {
              MoveCameraFrame = new MoveCameraFrameConfig();
              MoveCameraFrame.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 30:
            if (field.Type == TType.Struct) {
              PlayAudioFrame = new PlayAudioFrameConfig();
              PlayAudioFrame.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 101:
            if (field.Type == TType.Struct) {
              BoolFrame = new boolCommonConfig();
              BoolFrame.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 102:
            if (field.Type == TType.Struct) {
              StringFrame = new stringCommonConfig();
              StringFrame.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 103:
            if (field.Type == TType.Struct) {
              MoveTransformFrame = new MoveTransformFrameConfig();
              MoveTransformFrame.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 104:
            if (field.Type == TType.Struct) {
              Vector3Frame = new Common.Auto.ThriftVector3();
              Vector3Frame.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 105:
            if (field.Type == TType.Struct) {
              AddNpcFrame = new AddNpcFrameConfig();
              AddNpcFrame.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 106:
            if (field.Type == TType.Struct) {
              Runtime_CreateEffect = new Runtime_CreateEffectFrameConfig();
              Runtime_CreateEffect.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 107:
            if (field.Type == TType.Struct) {
              Runtime_MoveEffect = new Runtime_MoveEffectFrameConfig();
              Runtime_MoveEffect.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 108:
            if (field.Type == TType.Struct) {
              Runtime_AttackExec = new Runtime_AttackExecFrameConfig();
              Runtime_AttackExec.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 109:
            if (field.Type == TType.Struct) {
              Runtime_RemoveEffect = new Runtime_RemoveEffectFrameConfig();
              Runtime_RemoveEffect.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 110:
            if (field.Type == TType.Struct) {
              MovecharFrame = new MoveCharFrameConfig();
              MovecharFrame.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 111:
            if (field.Type == TType.Struct) {
              AddStateEffectFrame = new AddStateEffectFrameConfig();
              AddStateEffectFrame.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 112:
            if (field.Type == TType.Struct) {
              AddUIFrame = new AddUIFrameConfig();
              AddUIFrame.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 113:
            if (field.Type == TType.Struct) {
              RemoveUIFrame = new RemoveUIFrameConfig();
              RemoveUIFrame.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 114:
            if (field.Type == TType.Struct) {
              EntityPlayAnim = new EntityPlayAnimationConfig();
              EntityPlayAnim.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 115:
            if (field.Type == TType.Struct) {
              AnimcharFrame = new AnimCharFrameConfig();
              AnimcharFrame.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 116:
            if (field.Type == TType.Struct) {
              RotcharFrame = new RotateCharFrameConfig();
              RotcharFrame.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 117:
            if (field.Type == TType.Struct) {
              RotCameraFrame = new RotateCameraFrameConfig();
              RotCameraFrame.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 118:
            if (field.Type == TType.Struct) {
              ObjTransformFrame = new ObjectTransformFrameConfig();
              ObjTransformFrame.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 119:
            if (field.Type == TType.Struct) {
              FuncMethodFrame = new FuncMethodFrameConfig();
              FuncMethodFrame.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 120:
            if (field.Type == TType.Struct) {
              StopAudioFrame = new StopAudioFrameConfig();
              StopAudioFrame.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("ActionFrameData");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.time) {
        field.Name = "time";
        field.Type = TType.Double;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(Time);
        oprot.WriteFieldEnd();
      }
      if (__isset.type) {
        field.Name = "type";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Type);
        oprot.WriteFieldEnd();
      }
      if (TargetIDs != null && __isset.targetIDs) {
        field.Name = "targetIDs";
        field.Type = TType.List;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.I32, TargetIDs.Count));
          foreach (int _iter15 in TargetIDs)
          {
            oprot.WriteI32(_iter15);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (ShakeCameraFrame != null && __isset.shakeCameraFrame) {
        field.Name = "shakeCameraFrame";
        field.Type = TType.Struct;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        ShakeCameraFrame.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (MoveCameraFrame != null && __isset.moveCameraFrame) {
        field.Name = "moveCameraFrame";
        field.Type = TType.Struct;
        field.ID = 20;
        oprot.WriteFieldBegin(field);
        MoveCameraFrame.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (PlayAudioFrame != null && __isset.playAudioFrame) {
        field.Name = "playAudioFrame";
        field.Type = TType.Struct;
        field.ID = 30;
        oprot.WriteFieldBegin(field);
        PlayAudioFrame.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (BoolFrame != null && __isset.boolFrame) {
        field.Name = "boolFrame";
        field.Type = TType.Struct;
        field.ID = 101;
        oprot.WriteFieldBegin(field);
        BoolFrame.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (StringFrame != null && __isset.stringFrame) {
        field.Name = "stringFrame";
        field.Type = TType.Struct;
        field.ID = 102;
        oprot.WriteFieldBegin(field);
        StringFrame.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (MoveTransformFrame != null && __isset.moveTransformFrame) {
        field.Name = "moveTransformFrame";
        field.Type = TType.Struct;
        field.ID = 103;
        oprot.WriteFieldBegin(field);
        MoveTransformFrame.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (Vector3Frame != null && __isset.vector3Frame) {
        field.Name = "vector3Frame";
        field.Type = TType.Struct;
        field.ID = 104;
        oprot.WriteFieldBegin(field);
        Vector3Frame.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (AddNpcFrame != null && __isset.addNpcFrame) {
        field.Name = "addNpcFrame";
        field.Type = TType.Struct;
        field.ID = 105;
        oprot.WriteFieldBegin(field);
        AddNpcFrame.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (Runtime_CreateEffect != null && __isset.runtime_CreateEffect) {
        field.Name = "runtime_CreateEffect";
        field.Type = TType.Struct;
        field.ID = 106;
        oprot.WriteFieldBegin(field);
        Runtime_CreateEffect.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (Runtime_MoveEffect != null && __isset.runtime_MoveEffect) {
        field.Name = "runtime_MoveEffect";
        field.Type = TType.Struct;
        field.ID = 107;
        oprot.WriteFieldBegin(field);
        Runtime_MoveEffect.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (Runtime_AttackExec != null && __isset.runtime_AttackExec) {
        field.Name = "runtime_AttackExec";
        field.Type = TType.Struct;
        field.ID = 108;
        oprot.WriteFieldBegin(field);
        Runtime_AttackExec.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (Runtime_RemoveEffect != null && __isset.runtime_RemoveEffect) {
        field.Name = "runtime_RemoveEffect";
        field.Type = TType.Struct;
        field.ID = 109;
        oprot.WriteFieldBegin(field);
        Runtime_RemoveEffect.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (MovecharFrame != null && __isset.movecharFrame) {
        field.Name = "movecharFrame";
        field.Type = TType.Struct;
        field.ID = 110;
        oprot.WriteFieldBegin(field);
        MovecharFrame.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (AddStateEffectFrame != null && __isset.addStateEffectFrame) {
        field.Name = "addStateEffectFrame";
        field.Type = TType.Struct;
        field.ID = 111;
        oprot.WriteFieldBegin(field);
        AddStateEffectFrame.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (AddUIFrame != null && __isset.addUIFrame) {
        field.Name = "addUIFrame";
        field.Type = TType.Struct;
        field.ID = 112;
        oprot.WriteFieldBegin(field);
        AddUIFrame.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (RemoveUIFrame != null && __isset.removeUIFrame) {
        field.Name = "removeUIFrame";
        field.Type = TType.Struct;
        field.ID = 113;
        oprot.WriteFieldBegin(field);
        RemoveUIFrame.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (EntityPlayAnim != null && __isset.entityPlayAnim) {
        field.Name = "entityPlayAnim";
        field.Type = TType.Struct;
        field.ID = 114;
        oprot.WriteFieldBegin(field);
        EntityPlayAnim.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (AnimcharFrame != null && __isset.animcharFrame) {
        field.Name = "animcharFrame";
        field.Type = TType.Struct;
        field.ID = 115;
        oprot.WriteFieldBegin(field);
        AnimcharFrame.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (RotcharFrame != null && __isset.rotcharFrame) {
        field.Name = "rotcharFrame";
        field.Type = TType.Struct;
        field.ID = 116;
        oprot.WriteFieldBegin(field);
        RotcharFrame.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (RotCameraFrame != null && __isset.rotCameraFrame) {
        field.Name = "rotCameraFrame";
        field.Type = TType.Struct;
        field.ID = 117;
        oprot.WriteFieldBegin(field);
        RotCameraFrame.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (ObjTransformFrame != null && __isset.objTransformFrame) {
        field.Name = "objTransformFrame";
        field.Type = TType.Struct;
        field.ID = 118;
        oprot.WriteFieldBegin(field);
        ObjTransformFrame.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (FuncMethodFrame != null && __isset.funcMethodFrame) {
        field.Name = "funcMethodFrame";
        field.Type = TType.Struct;
        field.ID = 119;
        oprot.WriteFieldBegin(field);
        FuncMethodFrame.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (StopAudioFrame != null && __isset.stopAudioFrame) {
        field.Name = "stopAudioFrame";
        field.Type = TType.Struct;
        field.ID = 120;
        oprot.WriteFieldBegin(field);
        StopAudioFrame.Write(oprot);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("ActionFrameData(");
      sb.Append("Time: ");
      sb.Append(Time);
      sb.Append(",Type: ");
      sb.Append(Type);
      sb.Append(",TargetIDs: ");
      sb.Append(TargetIDs);
      sb.Append(",ShakeCameraFrame: ");
      sb.Append(ShakeCameraFrame== null ? "<null>" : ShakeCameraFrame.ToString());
      sb.Append(",MoveCameraFrame: ");
      sb.Append(MoveCameraFrame== null ? "<null>" : MoveCameraFrame.ToString());
      sb.Append(",PlayAudioFrame: ");
      sb.Append(PlayAudioFrame== null ? "<null>" : PlayAudioFrame.ToString());
      sb.Append(",BoolFrame: ");
      sb.Append(BoolFrame== null ? "<null>" : BoolFrame.ToString());
      sb.Append(",StringFrame: ");
      sb.Append(StringFrame== null ? "<null>" : StringFrame.ToString());
      sb.Append(",MoveTransformFrame: ");
      sb.Append(MoveTransformFrame== null ? "<null>" : MoveTransformFrame.ToString());
      sb.Append(",Vector3Frame: ");
      sb.Append(Vector3Frame== null ? "<null>" : Vector3Frame.ToString());
      sb.Append(",AddNpcFrame: ");
      sb.Append(AddNpcFrame== null ? "<null>" : AddNpcFrame.ToString());
      sb.Append(",Runtime_CreateEffect: ");
      sb.Append(Runtime_CreateEffect== null ? "<null>" : Runtime_CreateEffect.ToString());
      sb.Append(",Runtime_MoveEffect: ");
      sb.Append(Runtime_MoveEffect== null ? "<null>" : Runtime_MoveEffect.ToString());
      sb.Append(",Runtime_AttackExec: ");
      sb.Append(Runtime_AttackExec== null ? "<null>" : Runtime_AttackExec.ToString());
      sb.Append(",Runtime_RemoveEffect: ");
      sb.Append(Runtime_RemoveEffect== null ? "<null>" : Runtime_RemoveEffect.ToString());
      sb.Append(",MovecharFrame: ");
      sb.Append(MovecharFrame== null ? "<null>" : MovecharFrame.ToString());
      sb.Append(",AddStateEffectFrame: ");
      sb.Append(AddStateEffectFrame== null ? "<null>" : AddStateEffectFrame.ToString());
      sb.Append(",AddUIFrame: ");
      sb.Append(AddUIFrame== null ? "<null>" : AddUIFrame.ToString());
      sb.Append(",RemoveUIFrame: ");
      sb.Append(RemoveUIFrame== null ? "<null>" : RemoveUIFrame.ToString());
      sb.Append(",EntityPlayAnim: ");
      sb.Append(EntityPlayAnim== null ? "<null>" : EntityPlayAnim.ToString());
      sb.Append(",AnimcharFrame: ");
      sb.Append(AnimcharFrame== null ? "<null>" : AnimcharFrame.ToString());
      sb.Append(",RotcharFrame: ");
      sb.Append(RotcharFrame== null ? "<null>" : RotcharFrame.ToString());
      sb.Append(",RotCameraFrame: ");
      sb.Append(RotCameraFrame== null ? "<null>" : RotCameraFrame.ToString());
      sb.Append(",ObjTransformFrame: ");
      sb.Append(ObjTransformFrame== null ? "<null>" : ObjTransformFrame.ToString());
      sb.Append(",FuncMethodFrame: ");
      sb.Append(FuncMethodFrame== null ? "<null>" : FuncMethodFrame.ToString());
      sb.Append(",StopAudioFrame: ");
      sb.Append(StopAudioFrame== null ? "<null>" : StopAudioFrame.ToString());
      sb.Append(")");
      return sb.ToString();
    }

  }

}
