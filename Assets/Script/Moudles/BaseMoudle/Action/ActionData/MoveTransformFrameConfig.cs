/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace ActionEditor
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class MoveTransformFrameConfig : TBase
  {
    private EMoveType _moveType;
    private double _moveTime;
    private List<Common.Auto.ThriftVector3> _path;
    private bool _isAutoRotate;

    /// <summary>
    /// 
    /// <seealso cref="EMoveType"/>
    /// </summary>
    public EMoveType MoveType
    {
      get
      {
        return _moveType;
      }
      set
      {
        __isset.moveType = true;
        this._moveType = value;
      }
    }

    public double MoveTime
    {
      get
      {
        return _moveTime;
      }
      set
      {
        __isset.moveTime = true;
        this._moveTime = value;
      }
    }

    public List<Common.Auto.ThriftVector3> Path
    {
      get
      {
        return _path;
      }
      set
      {
        __isset.path = true;
        this._path = value;
      }
    }

    public bool IsAutoRotate
    {
      get
      {
        return _isAutoRotate;
      }
      set
      {
        __isset.isAutoRotate = true;
        this._isAutoRotate = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool moveType;
      public bool moveTime;
      public bool path;
      public bool isAutoRotate;
    }

    public MoveTransformFrameConfig() {
      this._isAutoRotate = true;
      this.__isset.isAutoRotate = true;
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              MoveType = (EMoveType)iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Double) {
              MoveTime = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.List) {
              {
                Path = new List<Common.Auto.ThriftVector3>();
                TList _list0 = iprot.ReadListBegin();
                for( int _i1 = 0; _i1 < _list0.Count; ++_i1)
                {
                  Common.Auto.ThriftVector3 _elem2 = new Common.Auto.ThriftVector3();
                  _elem2 = new Common.Auto.ThriftVector3();
                  _elem2.Read(iprot);
                  Path.Add(_elem2);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.Bool) {
              IsAutoRotate = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("MoveTransformFrameConfig");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.moveType) {
        field.Name = "moveType";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)MoveType);
        oprot.WriteFieldEnd();
      }
      if (__isset.moveTime) {
        field.Name = "moveTime";
        field.Type = TType.Double;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(MoveTime);
        oprot.WriteFieldEnd();
      }
      if (Path != null && __isset.path) {
        field.Name = "path";
        field.Type = TType.List;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, Path.Count));
          foreach (Common.Auto.ThriftVector3 _iter3 in Path)
          {
            _iter3.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (__isset.isAutoRotate) {
        field.Name = "isAutoRotate";
        field.Type = TType.Bool;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(IsAutoRotate);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("MoveTransformFrameConfig(");
      sb.Append("MoveType: ");
      sb.Append(MoveType);
      sb.Append(",MoveTime: ");
      sb.Append(MoveTime);
      sb.Append(",Path: ");
      sb.Append(Path);
      sb.Append(",IsAutoRotate: ");
      sb.Append(IsAutoRotate);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
